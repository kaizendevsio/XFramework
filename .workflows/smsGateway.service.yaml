trigger:
- Development/Main

stages:
- stage: DeployToStaging
  displayName: 'Deploy to Staging'
  jobs:
  - job: DeploySmsGatewayServiceToStaging
    displayName: 'Deploy SmsGateway Service to Staging'
    pool:
      name: Deployment-OnPrem-Staging  # Specify the staging agent pool
    variables:
      PublishDirectory: '/home/xnelsystems-staging/services/smsGateway'
      ProjectFilePath: 'src/Modules/XFramework.SmsGateway/SmsGateway.Api/SmsGateway.Api.csproj'
      ServiceExecutable: 'SmsGateway.Api.dll'
      ServiceFilePath: '/etc/systemd/system/xframework-smsGateway.service'
      ServiceName: 'xframework-smsGateway'
      Environment: 'Staging'
      BuildConfiguration: 'Release'
      BuildPlatform: 'any cpu'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk '
      inputs:
        version: 8.0.x

    - powershell: |
        # Define the directory path
        $folderPath = "$(PublishDirectory)/*"
        
        # Check if the directory exists
        if(Test-Path $folderPath)
        {
            # Remove all files and subdirectories
            try
            {
                Remove-Item $folderPath -Recurse -Force -ErrorAction Stop
                Write-Host "Successfully cleaned up directory: $($folderPath)"
            }
            catch
            {
                Write-Host "Failed to clean up directory: $($folderPath)"
            }
        }
        else
        {
            Write-Host "Directory '$folderPath' does not exist."
        }
      displayName: 'Clean Build Folder'

    - powershell: |
        # Define the service file path
        $serviceFilePath = "$(ServiceFilePath)"
        
        # Check if the service file exists
        if (Test-Path -Path $serviceFilePath) {
            # Stop the existing service
            sudo systemctl stop $(ServiceName).service
        
            if ($?) {
                Write-Host "Service stopped successfully."
            } else {
                Write-Host "Failed to stop the service."
                exit 1
            }
        }
      displayName: 'Stop Service'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '$(ProjectFilePath)'
        arguments: '--configuration $(BuildConfiguration) --output $(PublishDirectory)'
        zipAfterPublish: false
        modifyOutputPath: false

    - powershell: |
        # Define the service file path
        $serviceFilePath = "$(ServiceFilePath)"
        
        # Define the content of the service file
        $serviceContent = @"
        [Unit]
        Description=$(ServiceName)
        
        [Service]
        WorkingDirectory=$(PublishDirectory)
        ExecStart=/usr/bin/dotnet $(ProjectFilePath)/$(ServiceExecutable)
        Restart=always
        RestartSec=10
        SyslogIdentifier=$(ServiceName)
        Environment=ASPNETCORE_ENVIRONMENT=$(Environment)
        
        # Hardening
        SystemCallArchitectures=native
        #MemoryDenyWriteExecute=true
        NoNewPrivileges=true
        
        [Install]
        WantedBy=multi-user.target
        "@
        
        # Check if the service file exists
        if (-Not (Test-Path -Path $serviceFilePath)) {
            # Create the service file with the specified content
            echo $serviceContent | sudo tee $serviceFilePath > /dev/null
        
            # Reload the systemd manager configuration
            sudo systemctl daemon-reload
        
            # Enable the service
            sudo systemctl enable $(ServiceName).service
        
            Write-Host "Service created and enabled."
        }
      displayName: 'Ensure Service'

    - powershell: |
        # Define the service file path
        $serviceFilePath = "$(ServiceFilePath)"
        
        # Check if the service file exists
        if (Test-Path -Path $serviceFilePath) {
            # Start the existing service
            sudo systemctl start $(ServiceName).service
        
            if ($?) {
                Write-Host "Service started successfully."
            } else {
                Write-Host "Failed to start the service."
                exit 1
            }
        }
      displayName: 'Start Service'

- stage: Approval
  displayName: 'Approval to Production'
  jobs:
  - job: WaitForApproval
    displayName: 'Wait for Approval'
    pool: server
    steps:
    - task: ManualValidation@1
      timeoutInMinutes: 1440 # task times out in 1 day
      inputs:
        notifyUsers: 'xnel.systems@outlook.com'
        approvers: 'xnel.systems@outlook.com'
        instructions: 'Deploy to Production'
        onTimeout: 'reject'

- stage: DeployToProduction
  displayName: 'Deploy to Production'
  dependsOn: Approval
  jobs:
  - job: DeploySmsGatewayServiceToProduction
    displayName: 'Deploy SmsGateway Service to Production'
    pool:
      name: Deployment-OnPrem-Production  # Specify the production agent pool
    variables:
      PublishDirectory: '/home/xnelsystems-production/services/smsGateway'
      ProjectFilePath: 'src/Modules/XFramework.SmsGateway/SmsGateway.Api/SmsGateway.Api.csproj'
      ServiceExecutable: 'SmsGateway.Api.dll'
      ServiceFilePath: '/etc/systemd/system/xframework-smsGateway.service'
      ServiceName: 'xframework-smsGateway'
      Environment: 'Production'
      BuildConfiguration: 'Release'
      BuildPlatform: 'any cpu'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk '
      inputs:
        version: 8.0.x

    - powershell: |
        # Define the directory path
        $folderPath = "$(PublishDirectory)/*"
        
        # Check if the directory exists
        if(Test-Path $folderPath)
        {
            # Remove all files and subdirectories
            try
            {
                Remove-Item $folderPath -Recurse -Force -ErrorAction Stop
                Write-Host "Successfully cleaned up directory: $($folderPath)"
            }
            catch
            {
                Write-Host "Failed to clean up directory: $($folderPath)"
            }
        }
        else
        {
            Write-Host "Directory '$folderPath' does not exist."
        }
      displayName: 'Clean Build Folder'

    - powershell: |
        # Define the service file path
        $serviceFilePath = "$(ServiceFilePath)"
        
        # Check if the service file exists
        if (Test-Path -Path $serviceFilePath) {
            # Stop the existing service
            sudo systemctl stop $(ServiceName).service
        
            if ($?) {
                Write-Host "Service stopped successfully."
            } else {
                Write-Host "Failed to stop the service."
                exit 1
            }
        }
      displayName: 'Stop Service'

    - task: DotNetCoreCLI@2
      displayName: 'dotnet publish'
      inputs:
        command: publish
        publishWebProjects: false
        projects: '$(ProjectFilePath)'
        arguments: '--configuration $(BuildConfiguration) --output $(PublishDirectory)'
        zipAfterPublish: false
        modifyOutputPath: false

    - powershell: |
        # Define the service file path
        $serviceFilePath = "$(ServiceFilePath)"
        
        # Define the content of the service file
        $serviceContent = @"
        [Unit]
        Description=$(ServiceName)
        
        [Service]
        WorkingDirectory=$(PublishDirectory)
        ExecStart=/usr/bin/dotnet $(ProjectFilePath)/$(ServiceExecutable)
        Restart=always
        RestartSec=10
        SyslogIdentifier=$(ServiceName)
        Environment=ASPNETCORE_ENVIRONMENT=$(Environment)
        
        # Hardening
        SystemCallArchitectures=native
        #MemoryDenyWriteExecute=true
        NoNewPrivileges=true
        
        [Install]
        WantedBy=multi-user.target
        "@
        
        # Check if the service file exists
        if (-Not (Test-Path -Path $serviceFilePath)) {
            # Create the service file with the specified content
            echo $serviceContent | sudo tee $serviceFilePath > /dev/null
        
            # Reload the systemd manager configuration
            sudo systemctl daemon-reload
        
            # Enable the service
            sudo systemctl enable $(ServiceName).service
        
            Write-Host "Service created and enabled."
        }
      displayName: 'Ensure Service'

    - powershell: |
        # Define the service file path
        $serviceFilePath = "$(ServiceFilePath)"
        
        # Check if the service file exists
        if (Test-Path -Path $serviceFilePath) {
            # Start the existing service
            sudo systemctl start $(ServiceName).service
        
            if ($?) {
                Write-Host "Service started successfully."
            } else {
                Write-Host "Failed to start the service."
                exit 1
            }
        }
      displayName: 'Start Service'
