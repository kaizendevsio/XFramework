trigger:
  - Development/Main

variables:
  PublishDirectory: '$(Build.ArtifactStagingDirectory)/streamFlow'
  ProjectFilePath: 'src/Modules/XFramework.StreamFlow/StreamFlow.Stream/StreamFlow.Stream.csproj'
  ServiceExecutable: 'StreamFlow.Stream.dll'
  ServiceFilePath: '/etc/systemd/system/xframework-streamFlow.service'
  ServiceName: 'xframework-streamFlow'
  BuildConfiguration: 'Release'
  BuildPlatform: 'any cpu'
  ArtifactName: 'streamFlowArtifact'
  ZipFile: 'streamFlow.zip'

stages:
  - stage: BuildAndUpload
    displayName: 'Build and Upload'
    jobs:
      - job: Clean
        displayName: 'Clean'
        pool:
          name: Default-Linux
        steps:
          - checkout: none
          - task: UseDotNet@2
            displayName: 'Use .NET Core sdk'
            inputs:
              version: 8.0.x

          - task: DotNetCoreCLI@2
            displayName: 'Clean Project'
            inputs:
              command: custom
              custom: clean
              publishWebProjects: false
              projects: '$(System.DefaultWorkingDirectory)/$(ProjectFilePath)'
              arguments: '--configuration $(BuildConfiguration)'
              zipAfterPublish: false
              modifyOutputPath: false
                
      - job: BuildUpload
        dependsOn: Clean
        displayName: 'Build and Upload'
        pool:
          name: Default-Linux
        steps:
          - task: UseDotNet@2
            displayName: 'Use .NET Core sdk'
            inputs:
              version: 8.0.x
              
          - task: DotNetCoreCLI@2
            displayName: 'Publish Project'
            inputs:
              command: publish
              publishWebProjects: false
              projects: '$(System.DefaultWorkingDirectory)/$(ProjectFilePath)'
              arguments: '--configuration $(BuildConfiguration) --output $(PublishDirectory)'
              zipAfterPublish: false
              modifyOutputPath: false

          - task: PowerShell@2
            displayName: 'Zip Published Directory'
            inputs:
              targetType: 'inline'
              script: |
                Compress-Archive -Path "$(PublishDirectory)/*" -DestinationPath "$(Build.ArtifactStagingDirectory)/$(ZipFile)"
          
          - task: PublishPipelineArtifact@1
            displayName: 'Upload Artifact'
            inputs:
              targetPath: '$(Build.ArtifactStagingDirectory)/$(ZipFile)'
              artifactName: '$(ArtifactName)'         

  - stage: DeployToStaging
    displayName: 'Deploy to Staging'
    dependsOn: BuildAndUpload
    jobs:
      - deployment: DeployStreamFlowServiceToStaging
        displayName: 'Deploy StreamFlow Service to Staging'
        environment:
          name: 'Staging'
          tags: 'Staging'
          resourceType: 'VirtualMachine'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: '$(ArtifactName)'

                - task: PowerShell@2
                  displayName: 'Stop Service'
                  inputs:
                    targetType: 'inline'
                    script: |
                      $serviceFilePath = "$(ServiceFilePath)"
                      
                      if (Test-Path -Path $serviceFilePath) {
                          sudo systemctl stop $(ServiceName).service
                      
                          if ($?) {
                              Write-Host "Service stopped successfully."
                          } else {
                              Write-Host "Failed to stop the service."
                              exit 1
                          }
                      }
                      
                - task: PowerShell@2
                  displayName: 'Unzip Artifact'
                  inputs:
                    targetType: 'inline'
                    script: |
                      $destinationPath = "$(System.DefaultWorkingDirectory)/$(ServiceName)"
                      if (Test-Path $destinationPath) {
                        Remove-Item -Recurse -Force $destinationPath
                        Write-Host "Removed existing directory: $destinationPath"
                      }
                      Expand-Archive -Path "$(Pipeline.Workspace)/$(ArtifactName)/$(ZipFile)" -DestinationPath $destinationPath
                      Write-Host "Unzipped artifact to: $destinationPath"

                - task: PowerShell@2
                  displayName: 'Ensure Service'
                  inputs:
                    targetType: 'inline'
                    script: |
                      $serviceFilePath = "$(ServiceFilePath)"
                      $serviceContent = @"
                      [Unit]
                      Description=$(ServiceName)
                      
                      [Service]
                      WorkingDirectory=$(System.DefaultWorkingDirectory)/$(ServiceName)
                      ExecStart=/usr/bin/dotnet $(System.DefaultWorkingDirectory)/$(ServiceName)/$(ServiceExecutable)
                      Restart=always
                      RestartSec=10
                      SyslogIdentifier=$(ServiceName)
                      Environment=ASPNETCORE_ENVIRONMENT=Staging
                      
                      [Install]
                      WantedBy=multi-user.target
                      "@
                      
                      
                      echo $serviceContent | sudo tee $serviceFilePath > /dev/null
                      sudo systemctl daemon-reload
                      sudo systemctl enable $(ServiceName).service
                      Write-Host "Service created and enabled."
                      

                - task: PowerShell@2
                  displayName: 'Start Service'
                  inputs:
                    targetType: 'inline'
                    script: |
                      $serviceFilePath = "$(ServiceFilePath)"
                      
                      if (Test-Path -Path $serviceFilePath) {
                          sudo systemctl start $(ServiceName).service
                      
                          if ($?) {
                              Write-Host "Service started successfully."
                          } else {
                              Write-Host "Failed to start the service."
                              exit 1
                          }
                      }

  - stage: DeployToProduction
    displayName: 'Deploy to Production'
    dependsOn: DeployToStaging
    jobs:
      - deployment: DeployStreamFlowServiceToProduction
        displayName: 'Deploy StreamFlow Service to Production'
        environment: 'Production'
        strategy:
          runOnce:
            deploy:
              steps:
                - download: current
                  artifact: $(ArtifactName)

                - task: PowerShell@2
                  displayName: 'Stop Service'
                  inputs:
                    targetType: 'inline'
                    script: |
                      $serviceFilePath = "$(ServiceFilePath)"
                      
                      if (Test-Path -Path $serviceFilePath) {
                          sudo systemctl stop $(ServiceName).service
                      
                          if ($?) {
                              Write-Host "Service stopped successfully."
                          } else {
                              Write-Host "Failed to stop the service."
                              exit 1
                          }
                      }
                      
                - task: PowerShell@2
                  displayName: 'Unzip Artifact'
                  inputs:
                    targetType: 'inline'
                    script: |
                      $destinationPath = "$(System.DefaultWorkingDirectory)/$(ServiceName)"
                      if (Test-Path $destinationPath) {
                        Remove-Item -Recurse -Force $destinationPath
                        Write-Host "Removed existing directory: $destinationPath"
                      }
                      Expand-Archive -Path "$(Pipeline.Workspace)/$(ArtifactName)/$(ZipFile)" -DestinationPath $destinationPath
                      Write-Host "Unzipped artifact to: $destinationPath"

                - task: PowerShell@2
                  displayName: 'Ensure Service'
                  inputs:
                    targetType: 'inline'
                    script: |
                      $serviceFilePath = "$(ServiceFilePath)"
                      $serviceContent = @"
                      [Unit]
                      Description=$(ServiceName)
                      
                      [Service]
                      WorkingDirectory=$(System.DefaultWorkingDirectory)/$(ServiceName)
                      ExecStart=/usr/bin/dotnet $(System.DefaultWorkingDirectory)/$(ServiceName)/$(ServiceExecutable)
                      Restart=always
                      RestartSec=10
                      SyslogIdentifier=$(ServiceName)
                      Environment=ASPNETCORE_ENVIRONMENT=Production
                      
                      [Install]
                      WantedBy=multi-user.target
                      "@
                      
                      if (-Not (Test-Path -Path $serviceFilePath)) {
                          echo $serviceContent | sudo tee $serviceFilePath > /dev/null
                          sudo systemctl daemon-reload
                          sudo systemctl enable $(ServiceName).service
                          Write-Host "Service created and enabled."
                      }

                - task: PowerShell@2
                  displayName: 'Start Service'
                  inputs:
                    targetType: 'inline'
                    script: |
                      $serviceFilePath = "$(ServiceFilePath)"
                      
                      if (Test-Path -Path $serviceFilePath) {
                          sudo systemctl start $(ServiceName).service
                      
                          if ($?) {
                              Write-Host "Service started successfully."
                          } else {
                              Write-Host "Failed to start the service."
                              exit 1
                          }
                      }
