// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using XFramework.Domain.Contexts;

#nullable disable

namespace XFramework.Domain.Migrations.HealthEssentials
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240224024754_Addd_Held_And_Released_To_Wallets")]
    partial class AdddHeldAndReleasedToWallets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressBarangay", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<long>("CityCodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Code")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ProvCode")
                        .HasColumnType("integer");

                    b.Property<int?>("RegCode")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("addresses_refbrgy_pk");

                    b.HasIndex("CityCodeId");

                    b.HasIndex(new[] { "Code" }, "addresses_refbrgy_code_uindex")
                        .IsUnique();

                    b.ToTable("AddressBarangay", "GeoLocation");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressCity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("ProvCodeId")
                        .HasColumnType("bigint");

                    b.Property<long>("PsgcCode")
                        .HasColumnType("bigint");

                    b.Property<int?>("RegCode")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_addresscity_pk");

                    b.HasIndex("ProvCodeId");

                    b.HasIndex(new[] { "Code" }, "tbl_addresscity_code_uindex")
                        .IsUnique();

                    b.ToTable("AddressCity", "GeoLocation");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uuid")
                        .HasColumnName("CurrencyID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("IsoCode2")
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("IsoCode3")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PhoneCountryCode")
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_AddressCountry_pkey");

                    b.HasIndex("CurrencyId");

                    b.ToTable("AddressCountry", "GeoLocation");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressProvince", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("PsgcCode")
                        .HasColumnType("bigint");

                    b.Property<long>("RegCodeId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_addressprovince_pk");

                    b.HasIndex("RegCodeId");

                    b.HasIndex(new[] { "Code" }, "tbl_addressprovince_code_uindex")
                        .IsUnique();

                    b.ToTable("AddressProvince", "GeoLocation");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressRegion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<long>("Code")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("CountryID");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PsgcCode")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_addressregions_pk");

                    b.HasIndex("CountryId");

                    b.HasIndex(new[] { "Code" }, "tbl_addressregions_code_uindex")
                        .IsUnique();

                    b.ToTable("AddressRegion", "GeoLocation");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AuthorizationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<short?>("AuthStatus")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Ipaddress")
                        .HasMaxLength(18)
                        .HasColumnType("character varying(18)")
                        .HasColumnName("IPAddress");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsSuccess")
                        .HasColumnType("boolean");

                    b.Property<string>("LoginSource")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_tbl_IdentityAuthorizationLogs");

                    b.HasIndex(new[] { "CredentialId" }, "IX_tbl_IdentityAuthorizationLogs_CredentialID");

                    b.ToTable("AuthorizationLog", "Audit");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.BusinessPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CancellationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CodeHash")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("CodeString")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConsumedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<short?>("PackageStatus")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("RecipientCredentialId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UserDepositRequestId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserDepositRequestID");

                    b.HasKey("Id")
                        .HasName("tbl_BusinessPackages_pkey");

                    b.HasIndex("ConsumedById");

                    b.HasIndex("CredentialId");

                    b.HasIndex("RecipientCredentialId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserDepositRequestId");

                    b.ToTable("BusinessPackage", "BusinessPackage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.BusinessPackageInclusion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("BusinessPackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("BusinessPackageID");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StringValue")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("InclusionTypeID");

                    b.Property<decimal?>("Value")
                        .HasPrecision(16, 5)
                        .HasColumnType("numeric(16,5)");

                    b.HasKey("Id")
                        .HasName("tbl_BusinessPackageInclusions_pkey");

                    b.HasIndex("BusinessPackageId");

                    b.HasIndex("TypeId");

                    b.ToTable("BusinessPackageInclusion", "BusinessPackage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.BusinessPackageInclusionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("Code")
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("IconImage")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsNumericValue")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Unit")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("tbl_BusinessPackageInclusionsType_pkey");

                    b.ToTable("BusinessPackageInclusionsType", "BusinessPackage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.BusinessPackageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_BusinessPackageType_pkey");

                    b.ToTable("BusinessPackageType", "BusinessPackage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.BusinessPackageUpgradeTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CurrentBusinessPackageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PreviousBusinessPackageId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserBusinessPackageId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("businesspackageupgradetransactions_pk");

                    b.HasIndex("CredentialId");

                    b.HasIndex("CurrentBusinessPackageId");

                    b.ToTable("BusinessPackageUpgradeTransaction", "BusinessPackage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommissionDeductionRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<decimal?>("Balance")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.Property<Guid?>("BusinessPackageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("DeductionCharge")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("PrincipalAmount")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.Property<int?>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_usercommissiondeductionrequest_pk");

                    b.HasIndex("BusinessPackageId");

                    b.ToTable("CommissionDeductionRequest", "Affiliate");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityConnection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("SourceSocialMediaIdentityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetSocialMediaIdentityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("socialmediaconnection_pk");

                    b.HasIndex("SourceSocialMediaIdentityId");

                    b.HasIndex("TargetSocialMediaIdentityId");

                    b.HasIndex("TypeId");

                    b.ToTable("CommunityConnection", "Community");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityConnectionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("socialmediaconnectionentity_pk");

                    b.ToTable("CommunityConnectionType", "Community");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("CommunityGroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid?>("ParentContentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SocialMediaIdentityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .HasColumnType("character varying");

                    b.Property<string>("Title")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("socialmediacontent_pk");

                    b.HasIndex("CommunityGroupId");

                    b.HasIndex("ParentContentId");

                    b.HasIndex("SocialMediaIdentityId");

                    b.HasIndex("TypeId");

                    b.ToTable("CommunityContent", "Community");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityContentFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("socialmediacontentfiles_pk");

                    b.HasIndex("ContentId");

                    b.HasIndex("StorageId");

                    b.ToTable("CommunityContentFiles", "Community");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityContentReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("SocialMediaIdentityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("socialmediacontentreaction_pk");

                    b.HasIndex("ContentId");

                    b.HasIndex("SocialMediaIdentityId");

                    b.HasIndex("TypeId");

                    b.ToTable("CommunityContentReaction", "Community");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityContentReactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("socialmediacontentreactionentity_pk");

                    b.ToTable("CommunityContentReactionType", "Community");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityContentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("socialmediacontententity_pk");

                    b.ToTable("CommunityContentType", "Community");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("Alias")
                        .HasColumnType("character varying");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HandleName")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("LastActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Tagline")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("socialidentity_pk");

                    b.HasIndex("CredentialId");

                    b.HasIndex("TypeId");

                    b.ToTable("CommunityIdentity", "Community");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityIdentityFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("communityidentityfiles_pk");

                    b.HasIndex("IdentityId");

                    b.HasIndex("StorageId");

                    b.HasIndex("TypeId");

                    b.ToTable("CommunityIdentityFile", "Community");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityIdentityFileType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("communityidentityfileentity_pk");

                    b.ToTable("CommunityIdentityFileType", "Community");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityIdentityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("communityidentityentity_pk");

                    b.ToTable("CommunityIdentityType", "Community");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CurrencyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CurrencyIsoCode3")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<short?>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("tbl_currency_pk");

                    b.ToTable("CurrencyType", "Finance");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.DepositRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("Address")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("ConvenienceFee")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("DepositStatus")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("Discount")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.Property<int?>("DiscountType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GatewayId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("RawRequestData")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("RawResponseData")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<string>("Remarks")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid?>("SourceCurrencyId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("SystemFee")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WalletTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_DepositRequests_pkey");

                    b.HasIndex("CredentialId");

                    b.HasIndex("GatewayId");

                    b.HasIndex("SourceCurrencyId");

                    b.HasIndex("WalletTypeId");

                    b.ToTable("DepositRequest", "Wallet");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.ExchangeRate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EffectivityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Fee")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("SourceCurrencyTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("SourceCurrencyTypeID");

                    b.Property<Guid>("TargetCurrencyTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TargetCurrencyTypeID");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Value")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.HasKey("Id")
                        .HasName("tbl_ExchangeRate_pkey");

                    b.HasIndex("SourceCurrencyTypeId");

                    b.HasIndex("TargetCurrencyTypeId");

                    b.ToTable("ExchangeRate", "Finance");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid?>("AddressTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("AddressTypeID");

                    b.Property<Guid>("BarangayId")
                        .HasColumnType("uuid");

                    b.Property<string>("Building")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("DefaultAddress")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdentityInfoId")
                        .HasColumnType("uuid")
                        .HasColumnName("IdentityInfoID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Street")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Subdivision")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id")
                        .HasName("PK_tbl_IdentityAddresses");

                    b.HasIndex("BarangayId");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.HasIndex(new[] { "AddressTypeId" }, "IX_tbl_IdentityAddresses_AddressTypeID");

                    b.HasIndex(new[] { "IdentityInfoId" }, "IX_tbl_IdentityAddresses_UserInfoID");

                    b.ToTable("IdentityAddress", "Identity");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityAddressType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_tbl_IdentityAddressType");

                    b.ToTable("IdentityAddressType", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c9136227-f5dc-4147-984d-70aa855090e4"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "HOME",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("23c13259-1e24-427d-ba89-a4d2506c7464"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "PERSONAL",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("54ab2c38-be75-4572-916b-72019d676162"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "BUSINESS",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("66c8ab89-f24d-4aea-af1a-9ac6a8263575"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "WORK",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("4eec62eb-08ef-406c-9ea2-2ac2d6e0f206"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "BILLING",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("337ee33d-445f-4e6e-bc61-8709170b0ee4"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "SHIPPING",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityContact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("CredentialID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("PK_tbl_IdentityContacts");

                    b.HasIndex("GroupId");

                    b.HasIndex(new[] { "TypeId" }, "IX_tbl_IdentityContacts_TypeID");

                    b.HasIndex(new[] { "CredentialId" }, "tbl_identitycontacts_CredentialID_index");

                    b.ToTable("IdentityContact", "Identity");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityContactGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("identitycontactgroup_pk");

                    b.ToTable("IdentityContactGroup", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5d6f29ff-9779-44df-9900-40550bdf9d19"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "HOME",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("b4bda700-03c1-4a8a-bf6d-6043704cf767"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "PERSONAL",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("067b21a1-1cba-4c57-b357-43a6fab0a18b"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "BUSINESS",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("08fb17f1-f4ae-4540-b7ae-03dad680f9ea"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "WORK",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityContactType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_tbl_IdentityContactType");

                    b.ToTable("IdentityContactType", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cdc88887-c7e7-415e-9d43-cc0050d523d3"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Phone",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("03f26cc1-e4c2-424f-9d5b-b22d006ae45b"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Email",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("d89c4b4a-2077-44ea-958e-4327d191a14c"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Facebook",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("4e5edd0d-5c16-4955-9323-3c6e86b54f0b"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Instagram",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("17583df0-c1b2-47a7-875b-2d9b44f55249"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Twitter",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("2fa27f70-d083-4327-b04e-74e1295cb4be"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "LinkedIn",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityCredential", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Device")
                        .HasColumnType("text");

                    b.Property<Guid>("IdentityInfoId")
                        .HasColumnType("uuid")
                        .HasColumnName("IdentityInfoID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<string>("LastActivityType")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<short?>("LogInStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("OnlineSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("PasswordByte")
                        .HasColumnType("bytea");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TenantId");

                    b.Property<string>("Token")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("UserAlias")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("PK_tbl_IdentityCredentials");

                    b.HasIndex("TenantId");

                    b.HasIndex(new[] { "IdentityInfoId" }, "IX_tbl_IdentityCredentials_IdentityInfoID");

                    b.HasIndex(new[] { "UserName" }, "tbl_identitycredentials_un")
                        .IsUnique();

                    b.ToTable("IdentityCredential", "Identity");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityFavorite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid");

                    b.Property<string>("Data")
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("FavoriteTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("FavoriteTypeID");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_userfavorites_pk");

                    b.HasIndex("CredentialId");

                    b.HasIndex("FavoriteTypeId");

                    b.ToTable("IdentityFavorite", "Identity");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<int?>("CivilStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityDescription")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IdentityName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("TenantId");

                    b.HasKey("Id")
                        .HasName("PK_tbl_IdentityInfo");

                    b.HasIndex("TenantId");

                    b.ToTable("IdentityInformation", "Identity");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("UserCredID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("RoleExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("RoleTypeID");

                    b.HasKey("Id")
                        .HasName("PK_tbl_IdentityRoles");

                    b.HasIndex(new[] { "TypeId" }, "IX_tbl_IdentityRoles_RoleTypeID");

                    b.HasIndex(new[] { "CredentialId" }, "IX_tbl_IdentityRoles_UserCredID");

                    b.ToTable("IdentityRole", "Identity");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityRoleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short?>("RoleLevel")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_tbl_IdentityRoleType");

                    b.HasIndex("GroupId");

                    b.HasIndex("TenantId");

                    b.ToTable("IdentityRoleType", "Identity");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityRoleTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("identityroleentitygroup_pk");

                    b.ToTable("IdentityRoleEntityGroup", "Identity");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityVerification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("CredentialID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Expiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTimeOffset?>("StatusUpdatedOn")
                        .HasColumnType("time with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Token")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("VerificationTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("VerificationTypeID");

                    b.HasKey("Id")
                        .HasName("PK_tbl_IdentityVerifications");

                    b.HasIndex(new[] { "CredentialId" }, "IX_tbl_IdentityVerifications_CredentialID");

                    b.HasIndex(new[] { "VerificationTypeId" }, "IX_tbl_IdentityVerifications_VerificationTypeID");

                    b.ToTable("IdentityVerification", "Identity");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityVerificationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("DefaultExpiry")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<short?>("Priority")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_tbl_VerificationType");

                    b.ToTable("IdentityVerificationType", "Identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("45a7a8a7-3735-4a58-b93f-aa9e7b24a7c4"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultExpiry = 10L,
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "SMS",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("fe1197ba-dfee-4a4e-b2d3-f8f8c48796be"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultExpiry = 120L,
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Email",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("41b5d12c-ce50-4af6-b68f-79443bd5c489"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DefaultExpiry = 1051200L,
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "KYC",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IncomeTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("IncomeStatus")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("IncomeTypeId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("IncomeValue")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PairMapId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("SourceMapId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TargetMapId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<short?>("TransactionType")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("tbl_IncomeTransactions_pkey");

                    b.HasIndex("CredentialId");

                    b.HasIndex("IncomeTypeId");

                    b.ToTable("IncomeTransaction", "Income");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IncomeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("IncomeTypeDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IncomeTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("IncomeTypeShortName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsReward")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_IncomeType_pkey");

                    b.ToTable("IncomeType", "Income");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MessageThreadId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageThreadMemberId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("message_pk");

                    b.HasIndex("MessageThreadId");

                    b.HasIndex("MessageThreadMemberId");

                    b.ToTable("Message", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageDelivery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageThreadMemberId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagedelivery_pk");

                    b.HasIndex("MessageId");

                    b.HasIndex("MessageThreadMemberId");

                    b.HasIndex("TypeId");

                    b.ToTable("MessageDelivery", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageDeliveryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagedeliveryentity_pk");

                    b.ToTable("MessageDeliveryType", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageDirect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Intent")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ParentMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Recipient")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("RecipientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagedirect_pk");

                    b.HasIndex("ParentMessageId");

                    b.HasIndex("RecipientId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TypeId");

                    b.ToTable("MessageDirect", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagefiles_pk");

                    b.HasIndex("MessageId");

                    b.HasIndex("StorageId");

                    b.ToTable("MessageFiles", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageReaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagereaction_pk");

                    b.HasIndex("MessageId");

                    b.HasIndex("TypeId");

                    b.ToTable("MessageReaction", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageReactionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagereactionentity_pk");

                    b.ToTable("MessageReactionType", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThread", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagethread_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("MessageThread", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThreadMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MessageThreadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagethreadmember_pk");

                    b.HasIndex("CredentialId");

                    b.HasIndex("GroupId");

                    b.HasIndex("MessageThreadId");

                    b.ToTable("MessageThreadMember", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThreadMemberGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Emoji")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MessageThreadId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagethreadmembergroup_pk");

                    b.HasIndex("MessageThreadId");

                    b.ToTable("MessageThreadMemberGroup", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThreadMemberRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MessageThreadMemberId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagethreadmemberrole_pk");

                    b.HasIndex("MessageThreadMemberId");

                    b.HasIndex("RoleId");

                    b.ToTable("MessageThreadMemberRole", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThreadType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MessageTypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagethreadentity_pk");

                    b.HasIndex("MessageTypeId");

                    b.ToTable("MessageThreadType", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("messagetype_pk");

                    b.ToTable("MessageType", "Messaging");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MetaData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("KeyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("metadata_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("MetaData", "MetaData");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MetaDataType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("metadataentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("MetaDataType", "MetaData");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MetaDataTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("metadataentitygroup_pk");

                    b.ToTable("MetaDataEntityGroup", "MetaData");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGateway", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ConvenienceFee")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<decimal?>("Discount")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)")
                        .HasDefaultValueSql("0");

                    b.Property<Guid>("GatewayCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("GatewayCategoryID");

                    b.Property<string>("Image")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid?>("ProviderEndpointId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ServiceCharge")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_gateways_pk");

                    b.HasIndex("GatewayCategoryId");

                    b.HasIndex("ProviderEndpointId");

                    b.ToTable("Gateway", "Integration.PaymentGateway");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isEnabled")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_gatewaycategories_pk");

                    b.ToTable("GatewayCategory", "Integration.PaymentGateway");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayEndpoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("BaseUrlEndpoint")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("GatewayId")
                        .HasColumnType("uuid")
                        .HasColumnName("GatewayID");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("UrlEndpoint")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id")
                        .HasName("tbl_gatewayendpoints_pk");

                    b.HasIndex("GatewayId");

                    b.ToTable("GatewayEndpoint", "Integration.PaymentGateway");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayInstruction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExampleText")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("GatewayId")
                        .HasColumnType("uuid");

                    b.Property<string>("InstructionText")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("character varying");

                    b.Property<int?>("StepOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("GatewayInstructions_pk");

                    b.HasIndex("GatewayId");

                    b.ToTable("GatewayInstructions", "Integration.PaymentGateway");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("GatewayResponseTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ResponseStatusTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("gatewayresponse_pk");

                    b.HasIndex("GatewayResponseTypeId");

                    b.HasIndex("ResponseStatusTypeId");

                    b.ToTable("GatewayResponse", "Integration.PaymentGateway");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayResponseStatusType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("gatewayresponsestatustype_pk");

                    b.ToTable("GatewayResponseStatusType", "Integration.PaymentGateway");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayResponseType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GatewayTypeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("gatewayresponsetype_pk");

                    b.HasIndex("GatewayTypeId");

                    b.ToTable("GatewayResponseType", "Integration.PaymentGateway");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isDeleted")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isEnabled")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_gatewayType_pk");

                    b.ToTable("GatewayType", "Integration.PaymentGateway");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.RegistryConfiguration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("ApplicationId");

                    b.Property<string>("Unit")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("tbl_applicationconfiguration_pk");

                    b.HasIndex("GroupId");

                    b.HasIndex("TenantId");

                    b.ToTable("RegistryConfiguration", "Registry");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.RegistryConfigurationGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_configurationgroup_pk");

                    b.ToTable("RegistryConfigurationGroup", "Registry");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.RegistryFavoriteType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_favoriteType_pk");

                    b.ToTable("RegistryFavoriteType", "Registry");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("CredentialID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SessionData")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<Guid?>("SessionTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("SessionTypeID");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_tbl_SessionData");

                    b.HasIndex(new[] { "CredentialId" }, "IX_tbl_SessionData_CredentialID");

                    b.HasIndex(new[] { "SessionTypeId" }, "IX_tbl_SessionData_SessionTypeID");

                    b.ToTable("Session", "Identity");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.SessionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("PK_tbl_SessionType");

                    b.ToTable("SessionType", "Identity");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.StorageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("BlobContainer")
                        .HasColumnType("text");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<string>("ContentPath")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("ContentType")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("FileSize")
                        .HasColumnType("numeric");

                    b.Property<string>("Hash")
                        .HasColumnType("character varying");

                    b.Property<Guid>("Identifier")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<Guid>("StorageFileIdentifierId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("storagefile_pk");

                    b.HasIndex("StorageFileIdentifierId");

                    b.HasIndex("TypeId");

                    b.ToTable("StorageFile", "Storage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.StorageFileIdentifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("storagefileidentifier_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("StorageFileIdentifier", "Storage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.StorageFileIdentifierGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("scheduleentitygroup_pk");

                    b.ToTable("StorageFileIdentifierGroup", "Storage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.StorageFileType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("storagefileentity_pk");

                    b.ToTable("StorageFileType", "Storage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid")
                        .HasColumnName("CredentialID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("subscription_pk");

                    b.HasIndex("CredentialId");

                    b.HasIndex("TypeId");

                    b.ToTable("Subscription", "Affiliate");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.SubscriptionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("subscriptionentity_pk");

                    b.ToTable("SubscriptionType", "Affiliate");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<DateTime?>("AvailabilityDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<Guid?>("ParentTenantId")
                        .HasColumnType("uuid")
                        .HasColumnName("ParentAppID");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Version")
                        .HasPrecision(6, 3)
                        .HasColumnType("numeric(6,3)");

                    b.HasKey("Id")
                        .HasName("PK_tbl_Application");

                    b.ToTable("Application", "Application");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Wallet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<decimal?>("Balance")
                        .HasPrecision(24, 8)
                        .HasColumnType("numeric(24,8)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("false");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("OnHoldBalance")
                        .HasColumnType("numeric");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WalletTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_Wallets_pkey");

                    b.HasIndex("CredentialId");

                    b.HasIndex("WalletTypeId");

                    b.ToTable("Wallet", "Wallet");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.WalletAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<decimal?>("Balance")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_WalletAddresses_pkey");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletAddress", "Wallet");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.WalletTransaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<decimal>("Amount")
                        .HasPrecision(24, 8)
                        .HasColumnType("numeric(24,8)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<bool>("Held")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("PreviousBalance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PreviousOnHoldBalance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PreviousTotalBalance")
                        .HasPrecision(24, 8)
                        .HasColumnType("numeric(24,8)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Released")
                        .HasColumnType("boolean");

                    b.Property<string>("Remarks")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<decimal?>("RunningBalance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RunningOnHoldBalance")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("RunningTotalBalance")
                        .HasPrecision(24, 8)
                        .HasColumnType("numeric(24,8)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<int?>("TransactionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tbl_WalletTransactions_pkey");

                    b.HasIndex("CredentialId");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransaction", "Wallet");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.WalletType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CurrencyTypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("CurrencyTypeID");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Desc")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("MaxTransfer")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("MinTransfer")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<short>("Type")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("tbl_WalletType_pkey");

                    b.HasIndex("CurrencyTypeId");

                    b.HasIndex("TenantId");

                    b.ToTable("WalletType", "Wallet");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.WithdrawalRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("Address")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CredentialId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(18, 10)
                        .HasColumnType("numeric(18,10)");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WalletTypeId")
                        .HasColumnType("uuid");

                    b.Property<short?>("WithdrawalStatus")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("tbl_WithdrawalRequest_pkey");

                    b.HasIndex("CredentialId");

                    b.HasIndex("WalletId");

                    b.HasIndex("WalletTypeId");

                    b.ToTable("WithdrawalRequest", "Wallet");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressBarangay", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.AddressCity", "CityCode")
                        .WithMany("AddressBarangays")
                        .HasForeignKey("CityCodeId")
                        .HasPrincipalKey("Code")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tbl_addressbarangay_tbl_addresscity_code_fk");

                    b.Navigation("CityCode");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressCity", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.AddressProvince", "ProvCode")
                        .WithMany("AddressCities")
                        .HasForeignKey("ProvCodeId")
                        .HasPrincipalKey("Code")
                        .IsRequired()
                        .HasConstraintName("tbl_addresscity_tbl_addressprovince_code_fk");

                    b.Navigation("ProvCode");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressCountry", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.CurrencyType", "Currency")
                        .WithMany("AddressCountries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("CurrencyID");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressProvince", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.AddressRegion", "RegCode")
                        .WithMany("AddressProvinces")
                        .HasForeignKey("RegCodeId")
                        .HasPrincipalKey("Code")
                        .IsRequired()
                        .HasConstraintName("tbl_addressprovince_tbl_addressregions_code_fk");

                    b.Navigation("RegCode");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressRegion", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.AddressCountry", "Country")
                        .WithMany("AddressRegions")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tbl_addressregions_tbl_addresscountry_id_fk");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AuthorizationLog", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "IdentityCredentials")
                        .WithMany("AuthorizationLogs")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("tbl_userauthhistory_fk");

                    b.Navigation("IdentityCredentials");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.BusinessPackage", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "ConsumedBy")
                        .WithMany("BusinessPackageConsumedByNavigations")
                        .HasForeignKey("ConsumedById")
                        .HasConstraintName("tbl_userbusinesspackage_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("BusinessPackageIdentityCredentials")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BusinessPackage_CredentialId");

                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "RecipientIdentityCredential")
                        .WithMany("BusinessPackageRecipientIdentityCredentials")
                        .HasForeignKey("RecipientCredentialId")
                        .HasConstraintName("tbl_userbusinesspackage_tbl_userauth_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.BusinessPackageType", "Type")
                        .WithMany("BusinessPackages")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BusinessPackage_TypeId");

                    b.HasOne("XFramework.Domain.Shared.Contracts.DepositRequest", "UserDepositRequest")
                        .WithMany("BusinessPackages")
                        .HasForeignKey("UserDepositRequestId")
                        .HasConstraintName("DepositRequestId");

                    b.Navigation("ConsumedBy");

                    b.Navigation("Credential");

                    b.Navigation("RecipientIdentityCredential");

                    b.Navigation("Type");

                    b.Navigation("UserDepositRequest");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.BusinessPackageInclusion", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.BusinessPackage", "BusinessPackage")
                        .WithMany("BusinessPackageInclusions")
                        .HasForeignKey("BusinessPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BusinessPackageInclusions_BusinessPackageId");

                    b.HasOne("XFramework.Domain.Shared.Contracts.BusinessPackageInclusionType", "Type")
                        .WithMany("BusinessPackageInclusions")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("BusinessPackageInclusions_TypeID");

                    b.Navigation("BusinessPackage");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.BusinessPackageUpgradeTransaction", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("BusinessPackageUpgradeTransactions")
                        .HasForeignKey("CredentialId")
                        .IsRequired()
                        .HasConstraintName("ubput_tbl_identitycredentials_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.BusinessPackage", "CurrentBusinessPackage")
                        .WithMany("BusinessPackageUpgradeTransactions")
                        .HasForeignKey("CurrentBusinessPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ubput_tbl_businesspackage_id_fk");

                    b.Navigation("Credential");

                    b.Navigation("CurrentBusinessPackage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommissionDeductionRequest", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.BusinessPackage", "BusinessPackage")
                        .WithMany("CommissionDeductionRequests")
                        .HasForeignKey("BusinessPackageId")
                        .HasConstraintName("tbl_ucdr_tbl_userbusinesspackage_id_fk");

                    b.Navigation("BusinessPackage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityConnection", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityIdentity", "SourceSocialMediaIdentity")
                        .WithMany("CommunityConnectionSourceSocialMediaIdentities")
                        .HasForeignKey("SourceSocialMediaIdentityId")
                        .IsRequired()
                        .HasConstraintName("socialmedia_sourcesocialmediaidentityid_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityIdentity", "TargetSocialMediaIdentity")
                        .WithMany("CommunityConnectionTargetSocialMediaIdentities")
                        .HasForeignKey("TargetSocialMediaIdentityId")
                        .IsRequired()
                        .HasConstraintName("socialmedia_targetsocialmediaidentityid_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityConnectionType", "Type")
                        .WithMany("CommunityConnections")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("metadata_metadataentity_id_fk");

                    b.Navigation("SourceSocialMediaIdentity");

                    b.Navigation("TargetSocialMediaIdentity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityContent", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityIdentity", "CommunityGroup")
                        .WithMany("CommunityContentCommunityGroups")
                        .HasForeignKey("CommunityGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("communitycontent_communityidentity_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityContent", "ParentContent")
                        .WithMany("InverseParentContent")
                        .HasForeignKey("ParentContentId")
                        .HasConstraintName("socialmediacontent_socialmediacontent_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityIdentity", "SocialMediaIdentity")
                        .WithMany("CommunityContentSocialMediaIdentities")
                        .HasForeignKey("SocialMediaIdentityId")
                        .IsRequired()
                        .HasConstraintName("socialmediacontent_socialmediaidentity_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityContentType", "Type")
                        .WithMany("CommunityContents")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("socialmediacontent_socialmediacontententity_id_fk");

                    b.Navigation("CommunityGroup");

                    b.Navigation("ParentContent");

                    b.Navigation("SocialMediaIdentity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityContentFile", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityContent", "Content")
                        .WithMany("CommunityContentFiles")
                        .HasForeignKey("ContentId")
                        .IsRequired()
                        .HasConstraintName("socialmediacontentfiles_socialmediacontent_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.StorageFile", "Storage")
                        .WithMany("CommunityContentFiles")
                        .HasForeignKey("StorageId")
                        .IsRequired()
                        .HasConstraintName("socialmediacontentfiles_storagefile_id_fk");

                    b.Navigation("Content");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityContentReaction", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityContent", "Content")
                        .WithMany("CommunityContentReactions")
                        .HasForeignKey("ContentId")
                        .IsRequired()
                        .HasConstraintName("socialmediacontentreaction_socialmediacontent_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityIdentity", "SocialMediaIdentity")
                        .WithMany("CommunityContentReactions")
                        .HasForeignKey("SocialMediaIdentityId")
                        .IsRequired()
                        .HasConstraintName("socialmediacontentreaction_socialmediaidentity_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityContentReactionType", "Type")
                        .WithMany("CommunityContentReactions")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("socialmediacontentreaction_contentreactionentity_id_fk");

                    b.Navigation("Content");

                    b.Navigation("SocialMediaIdentity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityIdentity", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("CommunityIdentities")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("socialidentity_identitycredential_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityIdentityType", "Type")
                        .WithMany("CommunityIdentities")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("communityidentity_communityidentityentity_id_fk");

                    b.Navigation("Credential");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityIdentityFile", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityIdentity", "Identity")
                        .WithMany("CommunityIdentityFiles")
                        .HasForeignKey("IdentityId")
                        .IsRequired()
                        .HasConstraintName("communityidentityfiles_communityidentity_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.StorageFile", "Storage")
                        .WithMany("CommunityIdentityFiles")
                        .HasForeignKey("StorageId")
                        .IsRequired()
                        .HasConstraintName("communityidentityfiles_storagefile_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.CommunityIdentityFileType", "Type")
                        .WithMany("CommunityIdentityFiles")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("communityidentityfile_communityidentityfileentity_id_fk");

                    b.Navigation("Identity");

                    b.Navigation("Storage");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.DepositRequest", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("DepositRequests")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("DepositRequest_CredentialId");

                    b.HasOne("XFramework.Domain.Shared.Contracts.PaymentGateway", "PaymentGateway")
                        .WithMany("DepositRequests")
                        .HasForeignKey("GatewayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("DepositRequest_Gateway_ID_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.CurrencyType", "SourceCurrency")
                        .WithMany("DepositRequests")
                        .HasForeignKey("SourceCurrencyId")
                        .HasConstraintName("SourceCurrencyId");

                    b.HasOne("XFramework.Domain.Shared.Contracts.WalletType", "WalletType")
                        .WithMany("DepositRequests")
                        .HasForeignKey("WalletTypeId")
                        .HasConstraintName("DepositRequest_WalletTypeId");

                    b.Navigation("Credential");

                    b.Navigation("PaymentGateway");

                    b.Navigation("SourceCurrency");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.ExchangeRate", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.CurrencyType", "SourceCurrencyType")
                        .WithMany("ExchangeRateSourceCurrencyTypes")
                        .HasForeignKey("SourceCurrencyTypeId")
                        .IsRequired()
                        .HasConstraintName("SourceCurrencyID");

                    b.HasOne("XFramework.Domain.Shared.Contracts.CurrencyType", "TargetCurrencyType")
                        .WithMany("ExchangeRateTargetCurrencyTypes")
                        .HasForeignKey("TargetCurrencyTypeId")
                        .IsRequired()
                        .HasConstraintName("TargetCurrencyID");

                    b.Navigation("SourceCurrencyType");

                    b.Navigation("TargetCurrencyType");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityAddress", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityAddressType", "AddressType")
                        .WithMany("IdentityAddresses")
                        .HasForeignKey("AddressTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("AddressTypeID");

                    b.HasOne("XFramework.Domain.Shared.Contracts.AddressBarangay", "Barangay")
                        .WithMany("IdentityAddresses")
                        .HasForeignKey("BarangayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tbl_identityaddresses__id_fk_brgy");

                    b.HasOne("XFramework.Domain.Shared.Contracts.AddressCity", "City")
                        .WithMany("IdentityAddresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tbl_identityaddresses__id_fk_city");

                    b.HasOne("XFramework.Domain.Shared.Contracts.AddressCountry", "Country")
                        .WithMany("IdentityAddresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tbl_identityaddresses_tbl_addresscountry__fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityInformation", "IdentityInfo")
                        .WithMany("IdentityAddresses")
                        .HasForeignKey("IdentityInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("UserInfoID");

                    b.HasOne("XFramework.Domain.Shared.Contracts.AddressProvince", "Province")
                        .WithMany("IdentityAddresses")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tbl_identityaddresses__id_fk_province");

                    b.HasOne("XFramework.Domain.Shared.Contracts.AddressRegion", "Region")
                        .WithMany("IdentityAddresses")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tbl_identityaddresses__id_fk");

                    b.Navigation("AddressType");

                    b.Navigation("Barangay");

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("IdentityInfo");

                    b.Navigation("Province");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityContact", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("IdentityContacts")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tbl_identitycontacts___fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityContactGroup", "Group")
                        .WithMany("IdentityContacts")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("identitycontact_identitycontactgroup__fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityContactType", "Type")
                        .WithMany("IdentityContacts")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("IdentityContact_TypeID");

                    b.Navigation("Credential");

                    b.Navigation("Group");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityCredential", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityInformation", "IdentityInfo")
                        .WithMany("IdentityCredentials")
                        .HasForeignKey("IdentityInfoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("tbl_identitycredentials_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.Tenant", "Tenant")
                        .WithMany("IdentityCredentials")
                        .HasForeignKey("TenantId")
                        .IsRequired()
                        .HasConstraintName("tbl_identitycredentials___fk");

                    b.Navigation("IdentityInfo");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityFavorite", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("IdentityFavorites")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tbl_userfavorites_tbl_identitycredentials_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.RegistryFavoriteType", "FavoriteType")
                        .WithMany("IdentityFavorites")
                        .HasForeignKey("FavoriteTypeId")
                        .HasConstraintName("tbl_userfavorites_tbl_favoriteType_id_fk");

                    b.Navigation("Credential");

                    b.Navigation("FavoriteType");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityInformation", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.Tenant", "Tenant")
                        .WithMany("IdentityInformations")
                        .HasForeignKey("TenantId")
                        .IsRequired()
                        .HasConstraintName("identityinformation_application_id_fk");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityRole", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("IdentityRoles")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("tbl_identityroles_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityRoleType", "Type")
                        .WithMany("IdentityRoles")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("tbl_identityroles_fk_1");

                    b.Navigation("Credential");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityRoleType", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityRoleTypeGroup", "Group")
                        .WithMany("IdentityRoleTypes")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("identityroleentity_identityroleentitygroup_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.Tenant", "Tenant")
                        .WithMany("IdentityRoleTypes")
                        .HasForeignKey("TenantId")
                        .IsRequired()
                        .HasConstraintName("tbl_identityroleTypes_tbl_applications_id_fk");

                    b.Navigation("Group");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityVerification", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("IdentityVerifications")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("tbl_UserVerifications_AuthID");

                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityVerificationType", "VerificationType")
                        .WithMany("IdentityVerifications")
                        .HasForeignKey("VerificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("tbl_UserVerifications_VerificationTypeID");

                    b.Navigation("Credential");

                    b.Navigation("VerificationType");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IncomeTransaction", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("IncomeTransactions")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("IncomeTransaction_CredentialId");

                    b.HasOne("XFramework.Domain.Shared.Contracts.IncomeType", "IncomeType")
                        .WithMany("IncomeTransactions")
                        .HasForeignKey("IncomeTypeId")
                        .HasConstraintName("tbl_userincometransaction_tbl_incometype_id_fk");

                    b.Navigation("Credential");

                    b.Navigation("IncomeType");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Message", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageThread", "MessageThread")
                        .WithMany("Messages")
                        .HasForeignKey("MessageThreadId")
                        .IsRequired()
                        .HasConstraintName("message_messagethread_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageThreadMember", "MessageThreadMember")
                        .WithMany("Messages")
                        .HasForeignKey("MessageThreadMemberId")
                        .IsRequired()
                        .HasConstraintName("message_messagethreadmember_id_fk");

                    b.Navigation("MessageThread");

                    b.Navigation("MessageThreadMember");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageDelivery", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.Message", "Message")
                        .WithMany("MessageDeliveries")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("messagedelivery_message_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageThreadMember", "MessageThreadMember")
                        .WithMany("MessageDeliveries")
                        .HasForeignKey("MessageThreadMemberId")
                        .IsRequired()
                        .HasConstraintName("messagedelivery_messagethreadmember_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageDeliveryType", "Type")
                        .WithMany("MessageDeliveries")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("messagedelivery_messagedeliveryentity_id_fk");

                    b.Navigation("Message");

                    b.Navigation("MessageThreadMember");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageDirect", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageDirect", "ParentMessage")
                        .WithMany("InverseParentMessage")
                        .HasForeignKey("ParentMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messagedirect_messagedirect_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "RecipientNavigation")
                        .WithMany("MessageDirectRecipientNavigations")
                        .HasForeignKey("RecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("messagedirect_identitycredential_2_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "SenderNavigation")
                        .WithMany("MessageDirectSenderNavigations")
                        .HasForeignKey("SenderId")
                        .IsRequired()
                        .HasConstraintName("messagedirect_identitycredential_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageType", "Type")
                        .WithMany("MessageDirects")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("messagedirect_messagetype_id_fk");

                    b.Navigation("ParentMessage");

                    b.Navigation("RecipientNavigation");

                    b.Navigation("SenderNavigation");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageFile", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.Message", "Message")
                        .WithMany("MessageFiles")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("messagefiles_message_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.StorageFile", "Storage")
                        .WithMany("MessageFiles")
                        .HasForeignKey("StorageId")
                        .IsRequired()
                        .HasConstraintName("messagefiles_storagefile_id_fk");

                    b.Navigation("Message");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageReaction", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.Message", "Message")
                        .WithMany("MessageReactions")
                        .HasForeignKey("MessageId")
                        .IsRequired()
                        .HasConstraintName("messagereaction_message_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageReactionType", "Type")
                        .WithMany("MessageReactions")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("messagereaction_messagereactionentity_id_fk");

                    b.Navigation("Message");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThread", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageThreadType", "Type")
                        .WithMany("MessageThreads")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("messagethread_messagethreadentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThreadMember", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("MessageThreadMembers")
                        .HasForeignKey("CredentialId")
                        .IsRequired()
                        .HasConstraintName("messagethreadmember_identitycredential_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageThreadMemberGroup", "Group")
                        .WithMany("MessageThreadMembers")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("messagethreadmember_messagethreadmembergroup_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageThread", "MessageThread")
                        .WithMany("MessageThreadMembers")
                        .HasForeignKey("MessageThreadId")
                        .IsRequired()
                        .HasConstraintName("messagethreadmember_messagethread_id_fk");

                    b.Navigation("Credential");

                    b.Navigation("Group");

                    b.Navigation("MessageThread");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThreadMemberGroup", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageThread", "MessageThread")
                        .WithMany("MessageThreadMemberGroups")
                        .HasForeignKey("MessageThreadId")
                        .IsRequired()
                        .HasConstraintName("messagethreadmembergroup_messagethread_id_fk");

                    b.Navigation("MessageThread");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThreadMemberRole", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageThreadMember", "MessageThreadMember")
                        .WithMany("MessageThreadMemberRoles")
                        .HasForeignKey("MessageThreadMemberId")
                        .IsRequired()
                        .HasConstraintName("messagethreadmemberrole_messagethreadmember_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityRole", "Role")
                        .WithMany("MessageThreadMemberRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("messagethreadmemberrole_identityrole_id_fk");

                    b.Navigation("MessageThreadMember");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThreadType", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.MessageType", "MessageType")
                        .WithMany("MessageThreadTypes")
                        .HasForeignKey("MessageTypeId")
                        .IsRequired()
                        .HasConstraintName("messagethreadentity_messagetype_id_fk");

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MetaData", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.MetaDataType", "Type")
                        .WithMany("MetaData")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("metadata_metadataentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MetaDataType", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.MetaDataTypeGroup", "Group")
                        .WithMany("MetaDataTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("metadataentity_metadataentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGateway", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.PaymentGatewayCategory", "PaymentGatewayCategory")
                        .WithMany("Gateways")
                        .HasForeignKey("GatewayCategoryId")
                        .IsRequired()
                        .HasConstraintName("tbl_gateways_tbl_gatewaycategories_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.PaymentGatewayEndpoint", "ProviderEndpoint")
                        .WithMany("Gateways")
                        .HasForeignKey("ProviderEndpointId")
                        .HasConstraintName("tbl_gateways_tbl_providerendpoints_id_fk");

                    b.Navigation("PaymentGatewayCategory");

                    b.Navigation("ProviderEndpoint");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayEndpoint", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.PaymentGatewayType", "Gateway")
                        .WithMany("GatewayEndpoints")
                        .HasForeignKey("GatewayId")
                        .HasConstraintName("tbl_gatewayendpoints_tbl_gatewayType_id_fk");

                    b.Navigation("Gateway");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayInstruction", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.PaymentGateway", "Gateway")
                        .WithMany("GatewayInstructions")
                        .HasForeignKey("GatewayId")
                        .HasConstraintName("GatewayInstructions_Gateways_ID_fk");

                    b.Navigation("Gateway");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayResponse", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.PaymentGatewayResponseType", "PaymentGatewayResponseType")
                        .WithMany("GatewayResponses")
                        .HasForeignKey("GatewayResponseTypeId")
                        .IsRequired()
                        .HasConstraintName("gatewayresponse_gatewayresponsetype_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.PaymentGatewayResponseStatusType", "ResponseStatusType")
                        .WithMany("GatewayResponses")
                        .HasForeignKey("ResponseStatusTypeId")
                        .IsRequired()
                        .HasConstraintName("gatewayresponse_gatewayresponsestatustype_id_fk");

                    b.Navigation("PaymentGatewayResponseType");

                    b.Navigation("ResponseStatusType");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayResponseType", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.PaymentGatewayType", "PaymentGatewayType")
                        .WithMany("GatewayResponseTypes")
                        .HasForeignKey("GatewayTypeId")
                        .IsRequired()
                        .HasConstraintName("gatewayresponsetype_gatewayTypes_id_fk");

                    b.Navigation("PaymentGatewayType");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.RegistryConfiguration", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.RegistryConfigurationGroup", "Group")
                        .WithMany("RegistryConfigurations")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("tbl_configurations_tbl_configurationgroup_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.Tenant", "Tenant")
                        .WithMany("RegistryConfigurations")
                        .HasForeignKey("TenantId")
                        .IsRequired()
                        .HasConstraintName("tbl_applicationconfiguration_tbl_application_id_fk");

                    b.Navigation("Group");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Session", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("SessionData")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("tbl_sessiondata_fk_1");

                    b.HasOne("XFramework.Domain.Shared.Contracts.SessionType", "SessionType")
                        .WithMany("SessionData")
                        .HasForeignKey("SessionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("tbl_sessiondata_fk");

                    b.Navigation("Credential");

                    b.Navigation("SessionType");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.StorageFile", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.StorageFileIdentifier", "StorageFileIdentifier")
                        .WithMany("StorageFiles")
                        .HasForeignKey("StorageFileIdentifierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("storagefile_storagefileidentifier_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.StorageFileType", "Type")
                        .WithMany("StorageFiles")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("storagefile_storagefileentity_id_fk");

                    b.Navigation("StorageFileIdentifier");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.StorageFileIdentifier", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.StorageFileIdentifierGroup", "Group")
                        .WithMany("StorageFileIdentifiers")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("storagefileidentifier_storagefileidentifiergroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Subscription", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("Subscriptions")
                        .HasForeignKey("CredentialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("subscription_identitycredential_id_fk");

                    b.HasOne("XFramework.Domain.Shared.Contracts.SubscriptionType", "Type")
                        .WithMany("Subscriptions")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("subscription_subscriptionentity_id_fk");

                    b.Navigation("Credential");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Wallet", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("Wallets")
                        .HasForeignKey("CredentialId")
                        .IsRequired()
                        .HasConstraintName("tbl_Wallets_CredentialId_fkey");

                    b.HasOne("XFramework.Domain.Shared.Contracts.WalletType", "WalletType")
                        .WithMany("Wallets")
                        .HasForeignKey("WalletTypeId")
                        .HasConstraintName("tbl_Wallets_WalletTypeId_fkey");

                    b.Navigation("Credential");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.WalletAddress", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.Wallet", "Wallet")
                        .WithMany("WalletAddresses")
                        .HasForeignKey("WalletId")
                        .IsRequired()
                        .HasConstraintName("walletaddress_wallet_id_fk");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.WalletTransaction", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("CredentialId")
                        .IsRequired()
                        .HasConstraintName("UserAuthID");

                    b.HasOne("XFramework.Domain.Shared.Contracts.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("SourceUserWalletId");

                    b.Navigation("Credential");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.WalletType", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.CurrencyType", "CurrencyType")
                        .WithMany("WalletTypes")
                        .HasForeignKey("CurrencyTypeId")
                        .HasConstraintName("CurrencyID");

                    b.HasOne("XFramework.Domain.Shared.Contracts.Tenant", "Tenant")
                        .WithMany("WalletTypes")
                        .HasForeignKey("TenantId")
                        .IsRequired()
                        .HasConstraintName("tbl_walletTypes_tbl_applications_id_fk");

                    b.Navigation("CurrencyType");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.WithdrawalRequest", b =>
                {
                    b.HasOne("XFramework.Domain.Shared.Contracts.IdentityCredential", "Credential")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("CredentialId")
                        .IsRequired()
                        .HasConstraintName("WithdrawalRequest_CredentialId");

                    b.HasOne("XFramework.Domain.Shared.Contracts.Wallet", "Wallet")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("WithdrawalRequest_WalletId");

                    b.HasOne("XFramework.Domain.Shared.Contracts.WalletType", "WalletType")
                        .WithMany("WithdrawalRequests")
                        .HasForeignKey("WalletTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Credential");

                    b.Navigation("Wallet");

                    b.Navigation("WalletType");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressBarangay", b =>
                {
                    b.Navigation("IdentityAddresses");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressCity", b =>
                {
                    b.Navigation("AddressBarangays");

                    b.Navigation("IdentityAddresses");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressCountry", b =>
                {
                    b.Navigation("AddressRegions");

                    b.Navigation("IdentityAddresses");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressProvince", b =>
                {
                    b.Navigation("AddressCities");

                    b.Navigation("IdentityAddresses");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.AddressRegion", b =>
                {
                    b.Navigation("AddressProvinces");

                    b.Navigation("IdentityAddresses");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.BusinessPackage", b =>
                {
                    b.Navigation("BusinessPackageInclusions");

                    b.Navigation("BusinessPackageUpgradeTransactions");

                    b.Navigation("CommissionDeductionRequests");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.BusinessPackageInclusionType", b =>
                {
                    b.Navigation("BusinessPackageInclusions");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.BusinessPackageType", b =>
                {
                    b.Navigation("BusinessPackages");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityConnectionType", b =>
                {
                    b.Navigation("CommunityConnections");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityContent", b =>
                {
                    b.Navigation("CommunityContentFiles");

                    b.Navigation("CommunityContentReactions");

                    b.Navigation("InverseParentContent");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityContentReactionType", b =>
                {
                    b.Navigation("CommunityContentReactions");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityContentType", b =>
                {
                    b.Navigation("CommunityContents");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityIdentity", b =>
                {
                    b.Navigation("CommunityConnectionSourceSocialMediaIdentities");

                    b.Navigation("CommunityConnectionTargetSocialMediaIdentities");

                    b.Navigation("CommunityContentCommunityGroups");

                    b.Navigation("CommunityContentReactions");

                    b.Navigation("CommunityContentSocialMediaIdentities");

                    b.Navigation("CommunityIdentityFiles");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityIdentityFileType", b =>
                {
                    b.Navigation("CommunityIdentityFiles");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CommunityIdentityType", b =>
                {
                    b.Navigation("CommunityIdentities");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.CurrencyType", b =>
                {
                    b.Navigation("AddressCountries");

                    b.Navigation("DepositRequests");

                    b.Navigation("ExchangeRateSourceCurrencyTypes");

                    b.Navigation("ExchangeRateTargetCurrencyTypes");

                    b.Navigation("WalletTypes");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.DepositRequest", b =>
                {
                    b.Navigation("BusinessPackages");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityAddressType", b =>
                {
                    b.Navigation("IdentityAddresses");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityContactGroup", b =>
                {
                    b.Navigation("IdentityContacts");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityContactType", b =>
                {
                    b.Navigation("IdentityContacts");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityCredential", b =>
                {
                    b.Navigation("AuthorizationLogs");

                    b.Navigation("BusinessPackageConsumedByNavigations");

                    b.Navigation("BusinessPackageIdentityCredentials");

                    b.Navigation("BusinessPackageRecipientIdentityCredentials");

                    b.Navigation("BusinessPackageUpgradeTransactions");

                    b.Navigation("CommunityIdentities");

                    b.Navigation("DepositRequests");

                    b.Navigation("IdentityContacts");

                    b.Navigation("IdentityFavorites");

                    b.Navigation("IdentityRoles");

                    b.Navigation("IdentityVerifications");

                    b.Navigation("IncomeTransactions");

                    b.Navigation("MessageDirectRecipientNavigations");

                    b.Navigation("MessageDirectSenderNavigations");

                    b.Navigation("MessageThreadMembers");

                    b.Navigation("SessionData");

                    b.Navigation("Subscriptions");

                    b.Navigation("WalletTransactions");

                    b.Navigation("Wallets");

                    b.Navigation("WithdrawalRequests");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityInformation", b =>
                {
                    b.Navigation("IdentityAddresses");

                    b.Navigation("IdentityCredentials");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityRole", b =>
                {
                    b.Navigation("MessageThreadMemberRoles");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityRoleType", b =>
                {
                    b.Navigation("IdentityRoles");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityRoleTypeGroup", b =>
                {
                    b.Navigation("IdentityRoleTypes");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IdentityVerificationType", b =>
                {
                    b.Navigation("IdentityVerifications");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.IncomeType", b =>
                {
                    b.Navigation("IncomeTransactions");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Message", b =>
                {
                    b.Navigation("MessageDeliveries");

                    b.Navigation("MessageFiles");

                    b.Navigation("MessageReactions");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageDeliveryType", b =>
                {
                    b.Navigation("MessageDeliveries");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageDirect", b =>
                {
                    b.Navigation("InverseParentMessage");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageReactionType", b =>
                {
                    b.Navigation("MessageReactions");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThread", b =>
                {
                    b.Navigation("MessageThreadMemberGroups");

                    b.Navigation("MessageThreadMembers");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThreadMember", b =>
                {
                    b.Navigation("MessageDeliveries");

                    b.Navigation("MessageThreadMemberRoles");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThreadMemberGroup", b =>
                {
                    b.Navigation("MessageThreadMembers");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageThreadType", b =>
                {
                    b.Navigation("MessageThreads");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MessageType", b =>
                {
                    b.Navigation("MessageDirects");

                    b.Navigation("MessageThreadTypes");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MetaDataType", b =>
                {
                    b.Navigation("MetaData");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.MetaDataTypeGroup", b =>
                {
                    b.Navigation("MetaDataTypes");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGateway", b =>
                {
                    b.Navigation("DepositRequests");

                    b.Navigation("GatewayInstructions");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayCategory", b =>
                {
                    b.Navigation("Gateways");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayEndpoint", b =>
                {
                    b.Navigation("Gateways");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayResponseStatusType", b =>
                {
                    b.Navigation("GatewayResponses");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayResponseType", b =>
                {
                    b.Navigation("GatewayResponses");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.PaymentGatewayType", b =>
                {
                    b.Navigation("GatewayEndpoints");

                    b.Navigation("GatewayResponseTypes");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.RegistryConfigurationGroup", b =>
                {
                    b.Navigation("RegistryConfigurations");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.RegistryFavoriteType", b =>
                {
                    b.Navigation("IdentityFavorites");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.SessionType", b =>
                {
                    b.Navigation("SessionData");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.StorageFile", b =>
                {
                    b.Navigation("CommunityContentFiles");

                    b.Navigation("CommunityIdentityFiles");

                    b.Navigation("MessageFiles");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.StorageFileIdentifier", b =>
                {
                    b.Navigation("StorageFiles");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.StorageFileIdentifierGroup", b =>
                {
                    b.Navigation("StorageFileIdentifiers");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.StorageFileType", b =>
                {
                    b.Navigation("StorageFiles");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.SubscriptionType", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Tenant", b =>
                {
                    b.Navigation("IdentityCredentials");

                    b.Navigation("IdentityInformations");

                    b.Navigation("IdentityRoleTypes");

                    b.Navigation("RegistryConfigurations");

                    b.Navigation("WalletTypes");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.Wallet", b =>
                {
                    b.Navigation("WalletAddresses");

                    b.Navigation("WalletTransactions");

                    b.Navigation("WithdrawalRequests");
                });

            modelBuilder.Entity("XFramework.Domain.Shared.Contracts.WalletType", b =>
                {
                    b.Navigation("DepositRequests");

                    b.Navigation("Wallets");

                    b.Navigation("WithdrawalRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
