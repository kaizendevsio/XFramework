@using Microsoft.AspNetCore.Components.Forms
@using FluentValidation
@using XFramework.Client.Shared.Entity.Enums
@typeparam TItem

<EditForm
    @ref="@EditForm"
    Model="@Model">
    
    @if (Validator is not null)
    {
        <DataAnnotationsValidator/>
        <FluentValidator Validator="@Validator"/>
    }

    <CascadingValue Value="@FormMode">
        <CascadingValue Value="@IsLoading">
            @ChildContent

            <FormButtons
                OnDelete="@OnDelete"
                OnCancel="@OnCancel"
                OnSave="async () => await InternalSubmit()"/>
        </CascadingValue>
    </CascadingValue>

</EditForm>


@code {

    private EditForm? EditForm { get; set; }
    private bool IsLoading { get; set; }

    public EditContext? EditContext => EditForm?.EditContext;
    
    [Parameter]
    public TItem? Model { get; set; }

    [Parameter]
    public Func<EditContext, Task>? OnValidSubmit { get; set; }
    
    [Parameter]
    public Func<EditContext, Task>? OnInvalidSubmit { get; set; }
    
    [Parameter]
    public Func<EditContext, Task>? OnSubmit { get; set; }

    [Parameter]
    public Func<Task>? OnCancel { get; set; }

    [Parameter]
    public Func<Task>? OnDelete { get; set; }

    [Parameter]
    public IValidator<TItem>? Validator { get; set; }
    
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    [Parameter] 
    public FormMode FormMode { get; set; }

    protected async Task InternalSubmit()
    {
        Console.WriteLine("On InternalSubmit..");
        IsLoading = true;
        StateHasChanged();
        
        if (EditContext!.Validate())
        {
            Console.WriteLine("Validating form..");
            if (OnValidSubmit is not null)
            {
                Console.WriteLine("Invoking OnValidSubmit");
                await OnValidSubmit?.Invoke(EditContext)!;
            }
        }
        else
        {
            if (OnInvalidSubmit is not null)
            {
                await OnInvalidSubmit?.Invoke(EditContext)!;
            }
        }
        if (OnSubmit is not null)
        {
            await OnSubmit?.Invoke(EditContext)!;
        }

        IsLoading = false;
        StateHasChanged();
    }
    
}