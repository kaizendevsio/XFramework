@using Microsoft.AspNetCore.Components.Forms
@using FluentValidation
@using XFramework.Client.Shared.Entity.Enums
@typeparam TItem

<EditForm
    @ref="@EditForm"
    Model="@Model"
    OnSubmit="async (e) => await OnSubmit?.Invoke(e)">
    
    @if (Validator is not null)
    {
        <DataAnnotationsValidator/>
        <FluentValidator Validator="@Validator"/>
    }

    <CascadingValue Value="@FormMode">
        @ChildContent

        <FormButtons
            OnDelete="@OnDelete"
            OnCancel="@OnCancel"/>
    </CascadingValue>

</EditForm>


@code {

    private EditForm? EditForm { get; set; }
    
    public EditContext? EditContext => EditForm?.EditContext;
    
    [Parameter]
    public TItem? Model { get; set; }

    [Parameter]
    public Func<EditContext, Task>? OnValidSubmit { get; set; }
    
    [Parameter]
    public Func<EditContext, Task>? OnInvalidSubmit { get; set; }
    
    [Parameter]
    public Func<EditContext, Task>? OnSubmit { get; set; }

    [Parameter]
    public Func<Task>? OnCancel { get; set; }

    [Parameter]
    public Func<Task>? OnDelete { get; set; }

    [Parameter]
    public IValidator<TItem>? Validator { get; set; }
    
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    
    [Parameter] 
    public FormMode FormMode { get; set; }
    
}