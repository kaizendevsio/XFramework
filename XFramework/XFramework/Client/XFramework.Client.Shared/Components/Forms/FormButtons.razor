@using XFramework.Client.Shared.Entity.Enums

<div class="d-flex flex-row justify-content-between">
    @if (OnDelete is not null && FormMode == FormMode.Edit)
    {
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OnDelete?.Invoke()">Delete</MudButton>
    }

    @if(FormMode is FormMode.Create or FormMode.Edit)
    {
        <div class="d-flex flex-row justify-content-end gap-3">
            <MudButton 
                Variant="Variant.Filled" 
                Color="Color.Warning"
                Disabled="@IsLoading"
                Size="Size.Large"
                OnClick="() => InternalCancel()">Cancel</MudButton>
            
            <MudButton 
                StartIcon="@Icons.Material.Filled.Save" 
                Variant="Variant.Filled" 
                Color="Color.Primary" 
                Disabled="@IsLoading"
                Size="Size.Large"
                OnClick="() => InternalSave()">Save 
                @if (IsLoading)
                {
                    <MudProgressCircular Class="ms-3" Indeterminate="@true" Color="Color.Dark" Size="Size.Small"/>
                }
            </MudButton>
        </div>
    }
</div>

@code {
    
    [Parameter]
    public Func<Task>? OnSave { get; set; }
    
    [Parameter]
    public Func<Task>? OnCancel { get; set; }
    
    [Parameter]
    public Func<Task>? OnDelete { get; set; }
    
    [CascadingParameter] 
    public FormMode FormMode { get; set; }

    [CascadingParameter]
    public bool IsLoading { get; set; }

    private Task InternalCancel()
    {
        return OnCancel?.Invoke() ?? NavigateBack();
    }
    
    private Task InternalSave()
    {
        return OnSave?.Invoke() ?? Task.CompletedTask;
    }
}