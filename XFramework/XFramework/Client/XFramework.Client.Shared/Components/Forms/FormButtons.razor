@using XFramework.Client.Shared.Entity.Enums
<div class="d-flex flex-row justify-content-between">
    @if (OnDelete is not null && FormMode == FormMode.Edit)
    {
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => OnDelete?.Invoke()">Delete</MudButton>
    }

    @if(FormMode is FormMode.Create or FormMode.Edit)
    {
        <div class="d-flex flex-row justify-content-end gap-3">
            <MudButton Variant="Variant.Filled" Color="Color.Warning" OnClick="() => Cancel()">Cancel</MudButton>
            <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Save" ButtonType="ButtonType.Submit" Color="Color.Primary" OnClick="() => OnSave?.Invoke()">Save</MudButton>
        </div>
    }
</div>

@code {
    
    [Parameter]
    public Func<Task>? OnSave { get; set; }
    
    [Parameter]
    public Func<Task>? OnCancel { get; set; }
    
    [Parameter]
    public Func<Task>? OnDelete { get; set; }
    
    [CascadingParameter] 
    public FormMode FormMode { get; set; }

    private Task Cancel()
    {
        return OnCancel?.Invoke() ?? NavigateBack();
    }
}