// <auto-generated />
using System;
using HealthEssentials.Domain.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HealthEssentials.Domain.Migrations.HealthEssentials
{
    [DbContext(typeof(HealthEssentialsContext))]
    [Migration("20240221165514_Make_SuggestedLaboratoryLocationId_Nullable")]
    partial class MakeSuggestedLaboratoryLocationIdNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Ailment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("OtherName")
                        .HasColumnType("character varying");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("ailment_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Ailment", "Ailment");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.AilmentTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("AilmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("metadata_pk");

                    b.HasIndex("AilmentId");

                    b.HasIndex("TagId");

                    b.ToTable("AilmentTag", "Ailment");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.AilmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("ailmententity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("AilmentType", "Ailment");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.AilmentTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("ailmententitygroup_pk");

                    b.ToTable("AilmentTypeGroup", "Ailment");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Availability", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool?>("IsAvailable")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("TimeEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TimeStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("availability_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Availability", "Schedule");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Consultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("consultation_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Consultation", "Consultation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac671073-c789-41c4-8c63-eb9c9084fde9"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Heart and cardiovascular system related consultations",
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Cardiologist",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TypeId = new Guid("ab3dc83a-0841-45ea-822d-19580b32cd91")
                        },
                        new
                        {
                            Id = new Guid("c051027c-dd33-4b2b-ac59-0024e650b231"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Skin related consultations, including skin diseases, allergies, and cosmetic concerns",
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Dermatologist",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TypeId = new Guid("ab3dc83a-0841-45ea-822d-19580b32cd91")
                        },
                        new
                        {
                            Id = new Guid("8c0d8be1-5241-40e9-bf2c-5a458ba58bac"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consultation for conditions affecting the ear, nose, and throat",
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "ENT (Ear, Nose, Throat)",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TypeId = new Guid("ab3dc83a-0841-45ea-822d-19580b32cd91")
                        },
                        new
                        {
                            Id = new Guid("f354d822-c472-4677-8086-7d6ec89047bf"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consultation for digestive system and gastrointestinal tract issues",
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Gastroenterologist",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TypeId = new Guid("ab3dc83a-0841-45ea-822d-19580b32cd91")
                        },
                        new
                        {
                            Id = new Guid("439c4908-63e2-4648-92b6-8ed10772e7ef"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Routine health check-up with a primary care physician",
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "General Check-up",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TypeId = new Guid("ab3dc83a-0841-45ea-822d-19580b32cd91")
                        },
                        new
                        {
                            Id = new Guid("0297352d-4788-4ee4-9241-e2cea66e41cd"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consultation for disorders of the nervous system, brain, and spinal cord",
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Neurologist",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TypeId = new Guid("ab3dc83a-0841-45ea-822d-19580b32cd91")
                        },
                        new
                        {
                            Id = new Guid("46e7bbe6-7ffe-47f7-858b-0f521273eb0f"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Eye examinations, vision care, and treatment of eye-related conditions",
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Optometrist/Ophthalmologist",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TypeId = new Guid("ab3dc83a-0841-45ea-822d-19580b32cd91")
                        },
                        new
                        {
                            Id = new Guid("aa4e36c7-cde2-481b-9c6a-e7276ab8f55a"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consultation for issues related to bones, joints, muscles, and ligaments",
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Orthopedist",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TypeId = new Guid("ab3dc83a-0841-45ea-822d-19580b32cd91")
                        },
                        new
                        {
                            Id = new Guid("901e6429-b7a1-421e-a72c-f25f4963e81b"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Healthcare for infants, children, and adolescents",
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Pediatrician",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TypeId = new Guid("ab3dc83a-0841-45ea-822d-19580b32cd91")
                        },
                        new
                        {
                            Id = new Guid("17d8f674-e960-4b4b-ac54-4d1f9a42a8d7"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Mental health consultations, including therapy and medication management",
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Psychiatrist/Psychologist",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TypeId = new Guid("ab3dc83a-0841-45ea-822d-19580b32cd91")
                        },
                        new
                        {
                            Id = new Guid("66e64415-73ea-4797-bc0a-d13a2c095501"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Routine health check-up with primary care physician",
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "General Check-up",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000"),
                            TypeId = new Guid("cda4df14-aa1c-4fc9-86a4-cb855b84b555")
                        });
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<decimal?>("AmountDue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("character varying");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiscountType")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("MeetingLink")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<short?>("PaymentStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("Prescription")
                        .HasColumnType("character varying");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Symptoms")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Treatment")
                        .HasColumnType("character varying");

                    b.Property<Guid>("WalletTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("consultationjoborder_pk");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("ConsultationJobOrder", "Consultation");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrderLaboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("PrescriptionNote")
                        .HasColumnType("character varying");

                    b.Property<string>("Quantity")
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("SuggestedLaboratoryLocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("consultationjoborderlaboratory_pk");

                    b.HasIndex("ConsultationJobOrderId");

                    b.HasIndex("LaboratoryServiceId");

                    b.HasIndex("SuggestedLaboratoryLocationId");

                    b.ToTable("ConsultationJobOrderLaboratory", "Consultation");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrderMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Dosage")
                        .HasColumnType("integer");

                    b.Property<Guid>("DosageUnitId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Duration")
                        .HasPrecision(2)
                        .HasColumnType("numeric(2)");

                    b.Property<Guid>("DurationUnitId")
                        .HasColumnType("uuid");

                    b.Property<int>("IntakeRepetition")
                        .HasColumnType("integer");

                    b.Property<Guid>("IntakeUnitId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("PrescriptionNote")
                        .HasColumnType("character varying");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("consultationjobordermedicine_pk");

                    b.HasIndex("ConsultationJobOrderId");

                    b.HasIndex("DosageUnitId");

                    b.HasIndex("DurationUnitId");

                    b.HasIndex("IntakeUnitId");

                    b.HasIndex("MedicineId");

                    b.ToTable("ConsultationJobOrderMedicine", "Consultation");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("consultationtag_pk");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("TagId");

                    b.ToTable("ConsultationTag", "Consultation");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("consultationentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("ConsultationType", "Consultation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5037e7ae-864c-4336-b0bd-32350cf334aa"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Urgent consultation for acute illnesses or injuries",
                            GroupId = new Guid("3246bc14-c348-4e4e-9b0d-5d1d51760d16"),
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Emergency Consultation",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("f9c35417-bc70-4035-b70a-ac2c71b8a051"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Subsequent check-up following an initial consultation or treatment",
                            GroupId = new Guid("3246bc14-c348-4e4e-9b0d-5d1d51760d16"),
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Follow-up Check-up",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("cda4df14-aa1c-4fc9-86a4-cb855b84b555"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Routine health check-up with primary care physician",
                            GroupId = new Guid("3246bc14-c348-4e4e-9b0d-5d1d51760d16"),
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "General Check-up",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("73e5ed91-581e-47bf-8d7e-9c273847c483"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consultation for mental health issues (e.g., with a psychiatrist or psychologist)",
                            GroupId = new Guid("3246bc14-c348-4e4e-9b0d-5d1d51760d16"),
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Mental Health Consultation",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("3259dc78-49d0-4359-8c8b-b3cfe7ccc421"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Follow-up visit after a surgical procedure",
                            GroupId = new Guid("3246bc14-c348-4e4e-9b0d-5d1d51760d16"),
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Post-surgical Follow-up",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("c3221472-9a87-4be9-982a-d442296b487a"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consultation before undergoing surgery",
                            GroupId = new Guid("3246bc14-c348-4e4e-9b0d-5d1d51760d16"),
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Pre-surgical Consultation",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("ab3dc83a-0841-45ea-822d-19580b32cd91"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Consultation with a medical specialist (e.g., cardiologist, neurologist)",
                            GroupId = new Guid("3246bc14-c348-4e4e-9b0d-5d1d51760d16"),
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Specialist Consultation",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("consultationentitygroup_pk");

                    b.ToTable("ConsultationTypeGroup", "Consultation");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3246bc14-c348-4e4e-9b0d-5d1d51760d16"),
                            ConcurrencyStamp = new Guid("00000000-0000-0000-0000-000000000000"),
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false,
                            IsEnabled = false,
                            Name = "Unnamed",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Doctor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<decimal?>("BaseFee")
                        .HasColumnType("numeric");

                    b.Property<string>("Clinic")
                        .HasColumnType("character varying");

                    b.Property<string>("ClinicAddress")
                        .HasColumnType("character varying");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CredentialId")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Device")
                        .HasColumnType("text");

                    b.Property<int?>("ExperienceYears")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("boolean");

                    b.Property<string>("LastActivityType")
                        .HasColumnType("text");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("OnlineSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PhilHealthNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("PrcNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("PtrNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("TinNumber")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("doctor_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Doctor", "Doctor");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.DoctorConsultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<decimal?>("MaxDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal?>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric")
                        .HasDefaultValueSql("0");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("1");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("doctorconsultation_pk");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorConsultation", "Doctor");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.DoctorConsultationJobOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("doctorconsultationjoborder_pk");

                    b.HasIndex("ConsultationJobOrderId");

                    b.HasIndex("DoctorId");

                    b.ToTable("DoctorConsultationJobOrder", "Doctor");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.DoctorTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("doctortag_pk");

                    b.HasIndex("DoctorId");

                    b.HasIndex("TagId");

                    b.ToTable("DoctorTag", "Doctor");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.DoctorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("doctorentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("DoctorType", "Doctor");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.DoctorTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("doctorentitygroup_pk");

                    b.ToTable("DoctorTypeGroup", "Doctor");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Hospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Logo")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<string>("Phone")
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.Property<string>("Website")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("hospital_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Hospital", "Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalConsultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("hospitalconsultation_pk");

                    b.HasIndex("ConsultationId");

                    b.HasIndex("HospitalId");

                    b.ToTable("HospitalConsultation", "Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalLaboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("hospitallaboratory_pk");

                    b.HasIndex("HospitalId");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("HospitalLaboratory", "Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid?>("BarangayId")
                        .HasColumnType("uuid");

                    b.Property<string>("Building")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("MainAddress")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Street")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Subdivision")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id")
                        .HasName("hospitallocation_pk");

                    b.HasIndex("HospitalId");

                    b.ToTable("HospitalLocation", "Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("HospitalLocationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<decimal?>("MaxDiscount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("hospitalservice_pk");

                    b.HasIndex("HospitalId");

                    b.HasIndex("HospitalLocationId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("HospitalService", "Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalServiceTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HospitalServiceId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("hospitalservicetag_pk");

                    b.HasIndex("HospitalServiceId");

                    b.HasIndex("TagId");

                    b.ToTable("HospitalServiceTag", "Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("hospitalserviceentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("HospitalServiceType", "Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalServiceTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("hospitalserviceentitygroup_pk");

                    b.ToTable("HospitalServiceTypeGroup", "Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("hospitaltag_pk");

                    b.HasIndex("HospitalId");

                    b.HasIndex("TagId");

                    b.ToTable("HospitalTag", "Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("hospitalentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("HospitalType", "Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("hospitalentitygroup_pk");

                    b.ToTable("HospitalTypeGroup", "Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Laboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Logo")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("Phone")
                        .HasColumnType("character varying");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.Property<string>("Website")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("laboratory_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Laboratory", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<decimal?>("AmountDue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiscountType")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LaboratoryLocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<short?>("PaymentStatus")
                        .HasColumnType("smallint");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WalletTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("laboratoryjoborder_pk");

                    b.HasIndex("ConsultationJobOrderId");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("LaboratoryLocationId");

                    b.HasIndex("PatientId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("LaboratoryJobOrder", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LaboratoryServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Quantity")
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("laboratoryjoborderdetail_pk");

                    b.HasIndex("LaboratoryJobOrderId");

                    b.HasIndex("LaboratoryServiceId");

                    b.ToTable("LaboratoryJobOrderDetail", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrderResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("laboratoryjoborderresult_pk");

                    b.HasIndex("LaboratoryJobOrderId");

                    b.ToTable("LaboratoryJobOrderResult", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrderResultFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryJobOrderResultId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("StorageFileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("laboratoryjoborderresultfiles_pk");

                    b.HasIndex("LaboratoryJobOrderResultId");

                    b.ToTable("LaboratoryJobOrderResultFiles", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("AlternativePhone")
                        .HasColumnType("character varying");

                    b.Property<Guid>("BarangayId")
                        .HasColumnType("uuid");

                    b.Property<string>("Building")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<Guid>("IdentityCredentialId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("MainAddress")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("Phone")
                        .HasColumnType("character varying");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Street")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Subdivision")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Website")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("laboratorylocation_pk");

                    b.HasIndex("LaboratoryId");

                    b.ToTable("LaboratoryLocation", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryLocationTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryLocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("laboratorylocationtag_pk");

                    b.HasIndex("LaboratoryLocationId");

                    b.HasIndex("TagId");

                    b.ToTable("LaboratoryLocationTag", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CredentialId")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LaboratoryLocationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("laboratorymember_pk");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("LaboratoryLocationId");

                    b.ToTable("LaboratoryMember", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LaboratoryLocationId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("MaxDiscount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("laboratoryservice_pk");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("LaboratoryLocationId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("LaboratoryService", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryServiceTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryServiceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("laboratoryservicetag_pk");

                    b.HasIndex("LaboratoryServiceId");

                    b.HasIndex("TagId");

                    b.ToTable("LaboratoryServiceTag", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("laboratoryserviceentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("LaboratoryServiceType", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryServiceTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("laboratoryserviceentitygroup_pk");

                    b.ToTable("LaboratoryServiceTypeGroup", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("pharmacytag_pk");

                    b.HasIndex("LaboratoryId");

                    b.HasIndex("TagId");

                    b.ToTable("LaboratoryTag", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("laboratoryentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("LaboratoryType", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("laboratoryentitygroup_pk");

                    b.ToTable("LaboratoryTypeGroup", "Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Logistic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Logo")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("Phone")
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.Property<string>("Website")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("logistic_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Logistic", "Logistic");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticJobOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("RiderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("logisticjoborder_pk");

                    b.HasIndex("RiderId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("LogisticJobOrder", "Logistic");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticJobOrderDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("Discount")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DiscountType")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("LocationGuid")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("LogisticJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id")
                        .HasName("logisticjoborderdetail_pk");

                    b.HasIndex("LogisticJobOrderId");

                    b.HasIndex("UnitId");

                    b.ToTable("LogisticJobOrderDetail", "Logistic");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticJobOrderLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("BarangayId")
                        .HasColumnType("uuid");

                    b.Property<string>("Building")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<string>("ClientGuid")
                        .HasColumnType("character varying");

                    b.Property<string>("ClientName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDestination")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LogisticJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<bool?>("MainAddress")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<string>("Street")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Subdivision")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id")
                        .HasName("logisticjoborderlocation_pk");

                    b.HasIndex("LogisticJobOrderId");

                    b.ToTable("LogisticJobOrderLocation", "Logistic");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticRider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CredentialId")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("LicenseExpiry")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseNumber")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("VehicleType")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("logisticrider_pk");

                    b.ToTable("LogisticRider", "Logistic");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticRiderHandle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LogisticId")
                        .HasColumnType("uuid")
                        .HasColumnName("LogisticID");

                    b.Property<Guid>("LogisticRiderId")
                        .HasColumnType("uuid")
                        .HasColumnName("LogisticRiderID");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("logisticriderhandle_pk");

                    b.HasIndex("LogisticId");

                    b.HasIndex("LogisticRiderId");

                    b.ToTable("LogisticRiderHandle", "Logistic");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticRiderTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LogisticRiderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("logisticridertag_pk");

                    b.HasIndex("LogisticRiderId");

                    b.HasIndex("TagId");

                    b.ToTable("LogisticRiderTag", "Logistic");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("logisticentity_pk");

                    b.ToTable("LogisticType", "Logistic");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("ChemicalComponent")
                        .HasColumnType("character varying");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("ScientificName")
                        .HasColumnType("character varying");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("medicine_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Medicine", "Medicine");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineIntake", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<Guid>("Repetition")
                        .HasColumnType("uuid");

                    b.Property<string>("ScientificName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("medicineintake_pk");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("MedicineIntake", "Medicine");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineIntakeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("medicineintakeentity_pk");

                    b.ToTable("MedicineIntakeType", "Medicine");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("metadata_pk");

                    b.HasIndex("MedicineId");

                    b.HasIndex("TagId");

                    b.ToTable("MedicineTag", "Medicine");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("metadataentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("MedicineType", "Medicine");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("medicineentitygroup_pk");

                    b.ToTable("MedicineTypeGroup", "Medicine");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineVendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VendorId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("medicinevendor_pk");

                    b.HasIndex("MedicineId");

                    b.HasIndex("VendorId");

                    b.ToTable("MedicineVendor", "Medicine");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MetaData", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("KeyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("metadata_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("MetaData", "MetaData");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MetaDataType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("metadataentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("MetaDataType", "MetaData");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MetaDataTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("metadataentitygroup_pk");

                    b.ToTable("MetaDataTypeGroup", "MetaData");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Patient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CredentialId")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("patient_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Patient", "Patient");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientAilment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("AilmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("patientailment_pk");

                    b.HasIndex("AilmentId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientAilment", "Patient");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientAilmentDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DoctorName")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PatientAilmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("patientailmentdetail_pk");

                    b.HasIndex("ConsultationJobOrderId");

                    b.HasIndex("PatientAilmentId");

                    b.ToTable("PatientAilmentDetail", "Patient");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientConsultation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("patientconsultation_pk");

                    b.HasIndex("ConsultationJobOrderId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientConsultation", "Patient");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientLaboratory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("LaboratoryJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("patientlaboratory_pk");

                    b.HasIndex("LaboratoryJobOrderId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientLaboratory", "Patient");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientReminder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<short>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("patientreminder_pk");

                    b.HasIndex("ConsultationJobOrderId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientReminder", "Patient");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("pharmacytag_pk");

                    b.HasIndex("PatientId");

                    b.HasIndex("TagId");

                    b.ToTable("PatientTag", "Patient");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("patiententity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("PatientType", "Patient");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34ee8325-8060-43c7-b4a8-b8e861db6c47"),
                            ConcurrencyStamp = new Guid("41945689-8211-4757-8fd7-7fcf8c038cbe"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(650),
                            Description = "Outpatient services",
                            GroupId = new Guid("1fdf84c3-a53f-42bc-9cf9-22ca728ddef3"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Outpatient",
                            SortOrder = 1,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("da22eb54-e064-43d1-89ed-51591f21f903"),
                            ConcurrencyStamp = new Guid("fd91f2f8-fab8-4aa9-a254-942de1d59259"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(653),
                            Description = "Inpatient services",
                            GroupId = new Guid("1fdf84c3-a53f-42bc-9cf9-22ca728ddef3"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Inpatient",
                            SortOrder = 2,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("486917df-2b21-41fe-aa03-c564014f8cad"),
                            ConcurrencyStamp = new Guid("2df0c9fb-3e1b-435d-8dd5-eb6b22d20c1f"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(655),
                            Description = "Specialized pediatric services",
                            GroupId = new Guid("7a284dea-f6c1-4025-9149-842ccae76236"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Pediatric",
                            SortOrder = 1,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("1001c82f-987a-4ed2-893f-b0237aec69c4"),
                            ConcurrencyStamp = new Guid("a8e9bf33-8c57-42a9-8933-4424afddc1c8"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(658),
                            Description = "Immediate medical attention for life-threatening conditions",
                            GroupId = new Guid("1fdf84c3-a53f-42bc-9cf9-22ca728ddef3"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Emergency",
                            SortOrder = 3,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("e18ac75a-2d74-4670-8da2-201a476306ac"),
                            ConcurrencyStamp = new Guid("9f50eec1-2f37-429f-aca8-4a204bbb05f7"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(660),
                            Description = "Patients admitted for surgical procedures",
                            GroupId = new Guid("7a284dea-f6c1-4025-9149-842ccae76236"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Surgical",
                            SortOrder = 2,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("e36b4212-3add-452f-8448-825242821176"),
                            ConcurrencyStamp = new Guid("9610637e-9e77-4cbd-b69c-166836149a0d"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(663),
                            Description = "Long-term care for ongoing conditions like diabetes, heart disease",
                            GroupId = new Guid("1fdf84c3-a53f-42bc-9cf9-22ca728ddef3"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Chronic Care",
                            SortOrder = 4,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("d8149d7e-fc1b-4b3d-8c37-7befea74bbce"),
                            ConcurrencyStamp = new Guid("a86eb66f-7271-4ae4-ad92-ae734cb850f0"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(665),
                            Description = "Recovery and rehabilitation services for post-surgery or injury",
                            GroupId = new Guid("7a284dea-f6c1-4025-9149-842ccae76236"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Rehabilitation",
                            SortOrder = 3,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("b9099ba0-e446-4b71-8ec0-be1ced260a42"),
                            ConcurrencyStamp = new Guid("eb08561e-e49c-4057-9e7d-9cfc6ff27f34"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(668),
                            Description = "Care for childbirth and postnatal services",
                            GroupId = new Guid("1fdf84c3-a53f-42bc-9cf9-22ca728ddef3"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Maternity",
                            SortOrder = 5,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("ff0fdb4a-64b8-4b27-8c05-f55819a4511e"),
                            ConcurrencyStamp = new Guid("2c4b4388-2338-4612-a44b-4adf36d6252a"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(672),
                            Description = "Specialized care for elderly patients",
                            GroupId = new Guid("7a284dea-f6c1-4025-9149-842ccae76236"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Geriatric",
                            SortOrder = 4,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("ad6aa943-8f49-47f6-980c-7f45d5e4db58"),
                            ConcurrencyStamp = new Guid("9385f452-4bfd-4c64-90a5-2dc9b3458ea7"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(675),
                            Description = "Treatment for mental health conditions",
                            GroupId = new Guid("7a284dea-f6c1-4025-9149-842ccae76236"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Psychiatric",
                            SortOrder = 5,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("0a98a21f-0e34-418c-a2f9-67e42b0898fe"),
                            ConcurrencyStamp = new Guid("71b6b121-65f4-4c3a-be4a-0355e281ad14"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(677),
                            Description = "Relief from the symptoms and stress of a serious illness",
                            GroupId = new Guid("1fdf84c3-a53f-42bc-9cf9-22ca728ddef3"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Palliative Care",
                            SortOrder = 6,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("26b63a34-5aee-4474-9b9c-74a867e947cc"),
                            ConcurrencyStamp = new Guid("c7cedb11-b68d-4f39-b9a4-82dbc469e3ee"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(680),
                            Description = "Patients visiting for outpatient services without overnight stay",
                            GroupId = new Guid("1fdf84c3-a53f-42bc-9cf9-22ca728ddef3"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Ambulatory",
                            SortOrder = 7,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("c611fced-0cf2-4fc5-80ae-de0154bba11e"),
                            ConcurrencyStamp = new Guid("4ae8c49a-428f-4e93-a5e6-9eb83332bb25"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(682),
                            Description = "Medical care or treatment provided at the patient's home",
                            GroupId = new Guid("1fdf84c3-a53f-42bc-9cf9-22ca728ddef3"),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Home Care",
                            SortOrder = 8,
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("patiententitygroup_pk");

                    b.ToTable("PatientTypeGroup", "Patient");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fdf84c3-a53f-42bc-9cf9-22ca728ddef3"),
                            ConcurrencyStamp = new Guid("41a0aa59-4e4d-43ba-b90e-82580dfb7541"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(594),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "General",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        },
                        new
                        {
                            Id = new Guid("7a284dea-f6c1-4025-9149-842ccae76236"),
                            ConcurrencyStamp = new Guid("4fe8208e-3bd0-4245-bb8c-c397b021ded4"),
                            CreatedAt = new DateTime(2024, 2, 21, 16, 55, 13, 756, DateTimeKind.Utc).AddTicks(599),
                            IsDeleted = false,
                            IsEnabled = true,
                            Name = "Specialized",
                            TenantId = new Guid("00000000-0000-0000-0000-000000000000")
                        });
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Pharmacy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("ChemicalComponent")
                        .HasColumnType("character varying");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<string>("Logo")
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("Phone")
                        .HasColumnType("character varying");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying");

                    b.Property<string>("Slogan")
                        .HasColumnType("character varying");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Website")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("pharmacy_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Pharmacy", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyJobOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<decimal?>("AmountDue")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("AmountPaid")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("Discount")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("DiscountType")
                        .HasColumnType("numeric");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<short?>("PaymentStatus")
                        .HasColumnType("smallint");

                    b.Property<Guid>("PharmacyLocationId")
                        .HasColumnType("uuid");

                    b.Property<string>("PrescriptionNote")
                        .HasColumnType("character varying");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("character varying");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WalletTypeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pharmacyjoborder_pk");

                    b.HasIndex("PatientId");

                    b.HasIndex("PharmacyLocationId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("PharmacyJobOrder", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyJobOrderConsultationJobOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConsultationJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PharmacyJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pharmacyjoborderconsultationjoborder_pk");

                    b.HasIndex("ConsultationJobOrderId");

                    b.HasIndex("PharmacyJobOrderId");

                    b.ToTable("PharmacyJobOrderConsultationJobOrder", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyJobOrderMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("Dosage")
                        .HasColumnType("integer");

                    b.Property<Guid>("DosageUnitId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(2)
                        .HasColumnType("numeric(2)")
                        .HasDefaultValueSql("1");

                    b.Property<Guid>("DurationUnitId")
                        .HasColumnType("uuid");

                    b.Property<int>("IntakeRepetition")
                        .HasColumnType("integer");

                    b.Property<Guid>("IntakeUnitId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PharmacyJobOrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("PrescriptionNote")
                        .HasColumnType("character varying");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("Remarks")
                        .HasColumnType("character varying");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pharmacyjobordermedicine_pk");

                    b.HasIndex("DosageUnitId");

                    b.HasIndex("DurationUnitId");

                    b.HasIndex("IntakeUnitId");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PharmacyJobOrderId");

                    b.ToTable("PharmacyJobOrderMedicine", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<string>("AlternativePhone")
                        .HasColumnType("character varying");

                    b.Property<Guid>("BarangayId")
                        .HasColumnType("uuid");

                    b.Property<string>("Building")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<string>("Email")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("MainAddress")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<Guid>("PharmacyId")
                        .HasColumnType("uuid");

                    b.Property<string>("Phone")
                        .HasColumnType("character varying");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Street")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Subdivision")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("UnitNumber")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Website")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("pharmacylocation_pk");

                    b.HasIndex("PharmacyId");

                    b.ToTable("PharmacyLocation", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("CredentialId")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("PharmacyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PharmacyLocationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("pharmacymember_pk");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("PharmacyLocationId");

                    b.ToTable("PharmacyMember", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<decimal?>("MaxDiscount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<Guid>("PharmacyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PharmacyLocationId")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pharmacyservice_pk");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("PharmacyLocationId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UnitId");

                    b.ToTable("PharmacyService", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyServiceTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PharmacyServiceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("pharmacyservicetag_pk");

                    b.HasIndex("PharmacyServiceId");

                    b.HasIndex("TagId");

                    b.ToTable("PharmacyServiceTag", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pharmacyserviceentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("PharmacyServiceType", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyServiceTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pharmacyserviceentitygroup_pk");

                    b.ToTable("PharmacyServiceTypeGroup", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyStock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("AvailableQuantity")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("CriticalQuantity")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime>("LastRestock")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("MaxQuantity")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MedicineId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MinQuantity")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PharmacyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Unit")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pharmacystocks_pk");

                    b.HasIndex("MedicineId");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("Unit");

                    b.ToTable("PharmacyStocks", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("PharmacyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("pharmacytag_pk");

                    b.HasIndex("PharmacyId");

                    b.HasIndex("TagId");

                    b.ToTable("PharmacyTag", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pharmacyentity_pk");

                    b.ToTable("PharmacyType", "Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<DateTime>("ExpireAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<Guid>("PriorityId")
                        .HasColumnType("uuid")
                        .HasColumnName("PriorityID");

                    b.Property<DateTime>("StartAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("schedule_pk");

                    b.HasIndex("PriorityId");

                    b.HasIndex("TypeId");

                    b.ToTable("Schedule", "Schedule");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.SchedulePriority", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<short?>("Status")
                        .HasColumnType("smallint");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("schedulepriority_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("SchedulePriority", "Schedule");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.SchedulePriorityType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("schedulepriorityentity_pk");

                    b.ToTable("SchedulePriorityType", "Schedule");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ScheduleTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("character varying");

                    b.HasKey("Id")
                        .HasName("metadata_pk");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("TagId");

                    b.ToTable("ScheduleTag", "Schedule");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ScheduleType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("scheduleentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("ScheduleType", "Schedule");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ScheduleTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("scheduleentitygroup_pk");

                    b.ToTable("ScheduleTypeGroup", "Schedule");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("tag_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Tag", "Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.TagType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tagentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("TagType", "Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.TagTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("tagentitygroup_pk");

                    b.ToTable("TagTypeGroup", "Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Unit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<string>("ShortName")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("unit_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Unit", "Unit");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.UnitType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("unitentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("UnitType", "Unit");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.UnitTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("unitentitygroup_pk");

                    b.ToTable("UnitTypeGroup", "Unit");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Vendor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("character varying");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<bool?>("IsGenericProvider")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("TypeID");

                    b.HasKey("Id")
                        .HasName("metadata_pk");

                    b.HasIndex("TypeId");

                    b.ToTable("Vendor", "Services");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.VendorType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("vendorentity_pk");

                    b.HasIndex("GroupId");

                    b.ToTable("VendorType", "Services");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.VendorTypeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ID")
                        .HasDefaultValueSql("(uuid_generate_v4())");

                    b.Property<Guid>("ConcurrencyStamp")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValueSql("true");

                    b.Property<DateTime?>("ModifiedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("character varying");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("vendorentitygroup_pk");

                    b.ToTable("VendorTypeGroup", "Services");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Ailment", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.AilmentType", "Type")
                        .WithMany("Ailments")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("ailment_ailmententity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.AilmentTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Ailment", "Ailment")
                        .WithMany("AilmentTags")
                        .HasForeignKey("AilmentId")
                        .IsRequired()
                        .HasConstraintName("ailmenttag_ailment_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("AilmentTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("ailmenttag_tag_id_fk");

                    b.Navigation("Ailment");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.AilmentType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.AilmentTypeGroup", "Group")
                        .WithMany("AilmentTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("ailmententity_ailmententitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Availability", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ScheduleType", "Type")
                        .WithMany("Availabilities")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("schedule_scheduleentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Consultation", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ConsultationType", "Type")
                        .WithMany("Consultations")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("consultation_consultationentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrder", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Consultation", "Consultation")
                        .WithMany("ConsultationJobOrders")
                        .HasForeignKey("ConsultationId")
                        .IsRequired()
                        .HasConstraintName("consultationjoborder_consultation_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Schedule", "Schedule")
                        .WithMany("ConsultationJobOrders")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("consultationjoborder_schedule_id_fk");

                    b.Navigation("Consultation");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrderLaboratory", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrder", "ConsultationJobOrder")
                        .WithMany("ConsultationJobOrderLaboratories")
                        .HasForeignKey("ConsultationJobOrderId")
                        .IsRequired()
                        .HasConstraintName("consultationjoborderlaboratory_consultationjoborder_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryServiceType", "LaboratoryService")
                        .WithMany("ConsultationJobOrderLaboratories")
                        .HasForeignKey("LaboratoryServiceId")
                        .IsRequired()
                        .HasConstraintName("consultationjoborderlaboratory_laboratoryserviceentity_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryLocation", "SuggestedLaboratoryLocation")
                        .WithMany("ConsultationJobOrderLaboratories")
                        .HasForeignKey("SuggestedLaboratoryLocationId")
                        .HasConstraintName("consultationjoborderlaboratory_laboratorylocation_id_fk");

                    b.Navigation("ConsultationJobOrder");

                    b.Navigation("LaboratoryService");

                    b.Navigation("SuggestedLaboratoryLocation");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrderMedicine", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrder", "ConsultationJobOrder")
                        .WithMany("ConsultationJobOrderMedicines")
                        .HasForeignKey("ConsultationJobOrderId")
                        .IsRequired()
                        .HasConstraintName("consultationjobordermedicine_consultationjoborder_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "DosageUnit")
                        .WithMany("ConsultationJobOrderMedicineDosageUnits")
                        .HasForeignKey("DosageUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("consultationjobordermedicine_unit_id_fk_3");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "DurationUnit")
                        .WithMany("ConsultationJobOrderMedicineDurationUnits")
                        .HasForeignKey("DurationUnitId")
                        .IsRequired()
                        .HasConstraintName("consultationjobordermedicine_unit_id_fk_2");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "IntakeUnit")
                        .WithMany("ConsultationJobOrderMedicineIntakeUnits")
                        .HasForeignKey("IntakeUnitId")
                        .IsRequired()
                        .HasConstraintName("consultationjobordermedicine_unit_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Medicine", "Medicine")
                        .WithMany("ConsultationJobOrderMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("consultationjobordermedicine_medicine_id_fk");

                    b.Navigation("ConsultationJobOrder");

                    b.Navigation("DosageUnit");

                    b.Navigation("DurationUnit");

                    b.Navigation("IntakeUnit");

                    b.Navigation("Medicine");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Consultation", "Consultation")
                        .WithMany("ConsultationTags")
                        .HasForeignKey("ConsultationId")
                        .IsRequired()
                        .HasConstraintName("consultationtag_pharmacy_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("ConsultationTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("consultationtag_tag_id_fk");

                    b.Navigation("Consultation");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ConsultationTypeGroup", "Group")
                        .WithMany("ConsultationTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("consultationentity_consultationentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Doctor", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.DoctorType", "Type")
                        .WithMany("Doctors")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("doctor_doctorentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.DoctorConsultation", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Consultation", "Consultation")
                        .WithMany("DoctorConsultations")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("doctorconsultation_consultation_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Doctor", "Doctor")
                        .WithMany("DoctorConsultations")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("doctorconsultation_doctor_id_fk");

                    b.Navigation("Consultation");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.DoctorConsultationJobOrder", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrder", "ConsultationJobOrder")
                        .WithMany("DoctorConsultationJobOrders")
                        .HasForeignKey("ConsultationJobOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("doctorconsultation_consultationjoborder_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Doctor", "Doctor")
                        .WithMany("DoctorConsultationJobOrders")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("doctorconsultation_doctor_id_fk");

                    b.Navigation("ConsultationJobOrder");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.DoctorTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Doctor", "Doctor")
                        .WithMany("DoctorTags")
                        .HasForeignKey("DoctorId")
                        .IsRequired()
                        .HasConstraintName("doctortag_doctor_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("DoctorTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("doctor_tag_id_fk");

                    b.Navigation("Doctor");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.DoctorType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.DoctorTypeGroup", "Group")
                        .WithMany("DoctorTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("doctorentity_doctorentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Hospital", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.HospitalType", "Type")
                        .WithMany("Hospitals")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("hospital_hospitalentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalConsultation", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Consultation", "Consultation")
                        .WithMany("HospitalConsultations")
                        .HasForeignKey("ConsultationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hospitalconsultation_consultation_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Hospital", "Hospital")
                        .WithMany("HospitalConsultations")
                        .HasForeignKey("HospitalId")
                        .IsRequired()
                        .HasConstraintName("hospitalconsultation_hospital_id_fk");

                    b.Navigation("Consultation");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalLaboratory", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Hospital", "Hospital")
                        .WithMany("HospitalLaboratories")
                        .HasForeignKey("HospitalId")
                        .IsRequired()
                        .HasConstraintName("hospitalconsultation_hospital_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Laboratory", "Laboratory")
                        .WithMany("HospitalLaboratories")
                        .HasForeignKey("LaboratoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hospitallaboratory_laboratory_id_fk");

                    b.Navigation("Hospital");

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalLocation", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Hospital", "Hospital")
                        .WithMany("HospitalLocations")
                        .HasForeignKey("HospitalId")
                        .IsRequired()
                        .HasConstraintName("hospitallocation_hospital_id_fk");

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalService", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Hospital", "Hospital")
                        .WithMany("HospitalServices")
                        .HasForeignKey("HospitalId")
                        .IsRequired()
                        .HasConstraintName("hospitalservice_hospital_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.HospitalLocation", "HospitalLocation")
                        .WithMany("HospitalServices")
                        .HasForeignKey("HospitalLocationId")
                        .IsRequired()
                        .HasConstraintName("hospitalservice_hospitallocation_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.HospitalServiceType", "Type")
                        .WithMany("HospitalServices")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("hospitalservice_hospitalserviceentity_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "Unit")
                        .WithMany("HospitalServices")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hospitalservice_unit_id_fk");

                    b.Navigation("Hospital");

                    b.Navigation("HospitalLocation");

                    b.Navigation("Type");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalServiceTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.HospitalService", "HospitalService")
                        .WithMany("HospitalServiceTags")
                        .HasForeignKey("HospitalServiceId")
                        .IsRequired()
                        .HasConstraintName("hospitalservicetag_hospital_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("HospitalServiceTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hospitaltag_tag_id_fk");

                    b.Navigation("HospitalService");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalServiceType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.HospitalServiceTypeGroup", "Group")
                        .WithMany("HospitalServiceTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("hospitalserviceentity_hospitalserviceentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Hospital", "Hospital")
                        .WithMany("HospitalTags")
                        .HasForeignKey("HospitalId")
                        .IsRequired()
                        .HasConstraintName("hospitaltag_hospital_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("HospitalTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("hospital_tag_id_fk");

                    b.Navigation("Hospital");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.HospitalTypeGroup", "Group")
                        .WithMany("HospitalTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("hospitalentity_hospitalentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Laboratory", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryType", "Type")
                        .WithMany("Laboratories")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("laboratory_laboratoryentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrder", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrder", "ConsultationJobOrder")
                        .WithMany("LaboratoryJobOrders")
                        .HasForeignKey("ConsultationJobOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("laboratoryjoborder_consultationjoborder_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Laboratory", "Laboratory")
                        .WithMany("LaboratoryJobOrders")
                        .HasForeignKey("LaboratoryId")
                        .IsRequired()
                        .HasConstraintName("laboratoryjoborder_laboratory_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryLocation", "LaboratoryLocation")
                        .WithMany("LaboratoryJobOrders")
                        .HasForeignKey("LaboratoryLocationId")
                        .IsRequired()
                        .HasConstraintName("laboratoryjoborder_laboratorylocation_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Patient", "Patient")
                        .WithMany("LaboratoryJobOrders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("laboratoryjoborder_patient_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Schedule", "Schedule")
                        .WithMany("LaboratoryJobOrders")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("laboratoryjoborder_schedule_id_fk");

                    b.Navigation("ConsultationJobOrder");

                    b.Navigation("Laboratory");

                    b.Navigation("LaboratoryLocation");

                    b.Navigation("Patient");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrderDetail", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrder", "LaboratoryJobOrder")
                        .WithMany("LaboratoryJobOrderDetails")
                        .HasForeignKey("LaboratoryJobOrderId")
                        .IsRequired()
                        .HasConstraintName("laboratoryjoborderdetail_laboratoryjoborder_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryService", "LaboratoryService")
                        .WithMany("LaboratoryJobOrderDetails")
                        .HasForeignKey("LaboratoryServiceId")
                        .IsRequired()
                        .HasConstraintName("laboratoryjoborder_laboratoryservice_id_fk");

                    b.Navigation("LaboratoryJobOrder");

                    b.Navigation("LaboratoryService");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrderResult", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrder", "LaboratoryJobOrder")
                        .WithMany("LaboratoryJobOrderResults")
                        .HasForeignKey("LaboratoryJobOrderId")
                        .IsRequired()
                        .HasConstraintName("laboratoryjoborderresult_laboratoryjoborder_id_fk");

                    b.Navigation("LaboratoryJobOrder");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrderResultFile", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrderResult", "LaboratoryJobOrderResult")
                        .WithMany("LaboratoryJobOrderResultFiles")
                        .HasForeignKey("LaboratoryJobOrderResultId")
                        .IsRequired()
                        .HasConstraintName("laboratoryjoborderresultfiles_laboratoryjoborderresult_id_fk");

                    b.Navigation("LaboratoryJobOrderResult");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryLocation", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Laboratory", "Laboratory")
                        .WithMany("LaboratoryLocations")
                        .HasForeignKey("LaboratoryId")
                        .IsRequired()
                        .HasConstraintName("laboratorylocation_laboratory_id_fk");

                    b.Navigation("Laboratory");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryLocationTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryLocation", "LaboratoryLocation")
                        .WithMany("LaboratoryLocationTags")
                        .HasForeignKey("LaboratoryLocationId")
                        .IsRequired()
                        .HasConstraintName("laboratorylocationtag_laboratorylocation_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("LaboratoryLocationTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("laboratorylocationtag_tag_id_fk");

                    b.Navigation("LaboratoryLocation");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryMember", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Laboratory", "Laboratory")
                        .WithMany("LaboratoryMembers")
                        .HasForeignKey("LaboratoryId")
                        .IsRequired()
                        .HasConstraintName("laboratorymember_laboratory_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryLocation", "LaboratoryLocation")
                        .WithMany("LaboratoryMembers")
                        .HasForeignKey("LaboratoryLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("laboratorymember_laboratorylocation_id_fk");

                    b.Navigation("Laboratory");

                    b.Navigation("LaboratoryLocation");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryService", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Laboratory", "Laboratory")
                        .WithMany("LaboratoryServices")
                        .HasForeignKey("LaboratoryId")
                        .IsRequired()
                        .HasConstraintName("laboratoryservice_laboratory_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryLocation", "LaboratoryLocation")
                        .WithMany("LaboratoryServices")
                        .HasForeignKey("LaboratoryLocationId")
                        .IsRequired()
                        .HasConstraintName("laboratoryservice_laboratorylocation_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryServiceType", "Type")
                        .WithMany("LaboratoryServices")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("laboratoryservice_laboratoryserviceentity_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "Unit")
                        .WithMany("LaboratoryServices")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("laboratoryservice_unit_id_fk");

                    b.Navigation("Laboratory");

                    b.Navigation("LaboratoryLocation");

                    b.Navigation("Type");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryServiceTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryService", "LaboratoryService")
                        .WithMany("LaboratoryServiceTags")
                        .HasForeignKey("LaboratoryServiceId")
                        .IsRequired()
                        .HasConstraintName("laboratoryservicetag_pharmacy_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("LaboratoryServiceTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pharmacytag_tag_id_fk");

                    b.Navigation("LaboratoryService");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryServiceType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryServiceTypeGroup", "Group")
                        .WithMany("LaboratoryServiceTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("laboratoryserviceentity_laboratoryserviceentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Laboratory", "Laboratory")
                        .WithMany("LaboratoryTags")
                        .HasForeignKey("LaboratoryId")
                        .IsRequired()
                        .HasConstraintName("laboratorytag_pharmacy_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("LaboratoryTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pharmacytag_tag_id_fk");

                    b.Navigation("Laboratory");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryTypeGroup", "Group")
                        .WithMany("LaboratoryTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("laboratoryentity_laboratoryentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Logistic", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LogisticType", "Type")
                        .WithMany("Logistics")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("logistic_logisticentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticJobOrder", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LogisticRider", "Rider")
                        .WithMany("LogisticJobOrders")
                        .HasForeignKey("RiderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("logisticjoborder_logisticrider_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Schedule", "Schedule")
                        .WithMany("LogisticJobOrders")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("logisticjoborder_schedule_id_fk");

                    b.Navigation("Rider");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticJobOrderDetail", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LogisticJobOrder", "LogisticJobOrder")
                        .WithMany("LogisticJobOrderDetails")
                        .HasForeignKey("LogisticJobOrderId")
                        .IsRequired()
                        .HasConstraintName("logisticjoborderdetail_logisticjoborder_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "Unit")
                        .WithMany("LogisticJobOrderDetails")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("logisticjoborderdetail_unit_id_fk");

                    b.Navigation("LogisticJobOrder");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticJobOrderLocation", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LogisticJobOrder", "LogisticJobOrder")
                        .WithMany("LogisticJobOrderLocations")
                        .HasForeignKey("LogisticJobOrderId")
                        .IsRequired()
                        .HasConstraintName("logisticjoborderlocation_logisticjoborder_id_fk");

                    b.Navigation("LogisticJobOrder");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticRiderHandle", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Logistic", "Logistic")
                        .WithMany("LogisticRiderHandles")
                        .HasForeignKey("LogisticId")
                        .IsRequired()
                        .HasConstraintName("logisticriderhandle_logistic_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LogisticRider", "LogisticRider")
                        .WithMany("LogisticRiderHandles")
                        .HasForeignKey("LogisticRiderId")
                        .IsRequired()
                        .HasConstraintName("logisticriderhandle_logisticrider_id_fk");

                    b.Navigation("Logistic");

                    b.Navigation("LogisticRider");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticRiderTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LogisticRider", "LogisticRider")
                        .WithMany("LogisticRiderTags")
                        .HasForeignKey("LogisticRiderId")
                        .IsRequired()
                        .HasConstraintName("logistictag_logisticrider_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("LogisticRiderTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("logisticrider_tag_id_fk");

                    b.Navigation("LogisticRider");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Medicine", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.MedicineType", "Type")
                        .WithMany("Medicines")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("medicine_medicineentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineIntake", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.MedicineIntakeType", "Type")
                        .WithMany("MedicineIntakes")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("medicineintake_medicineintakeentity_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "Unit")
                        .WithMany("MedicineIntakes")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("medicineintake_unit_id_fk");

                    b.Navigation("Type");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Medicine", "Medicine")
                        .WithMany("MedicineTags")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("medicinetag_medicine_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("MedicineTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("medicinetag_tag_id_fk");

                    b.Navigation("Medicine");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.MedicineTypeGroup", "Group")
                        .WithMany("MedicineTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("medicineentity_medicineentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineVendor", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Medicine", "Medicine")
                        .WithMany("MedicineVendors")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("medicinetag_medicine_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Vendor", "Vendor")
                        .WithMany("MedicineVendors")
                        .HasForeignKey("VendorId")
                        .IsRequired()
                        .HasConstraintName("medicinevendor_vendor_id_fk");

                    b.Navigation("Medicine");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MetaData", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.MetaDataType", "Type")
                        .WithMany("MetaData")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("metadata_metadataentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MetaDataType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.MetaDataTypeGroup", "Group")
                        .WithMany("MetaDataTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("metadataentity_metadataentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Patient", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PatientType", "Type")
                        .WithMany("Patients")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("patient_patiententity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientAilment", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Ailment", "Ailment")
                        .WithMany("PatientAilments")
                        .HasForeignKey("AilmentId")
                        .IsRequired()
                        .HasConstraintName("patientailment_ailment_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Patient", "Patient")
                        .WithMany("PatientAilments")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("patientailment_patient_id_fk");

                    b.Navigation("Ailment");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientAilmentDetail", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrder", "ConsultationJobOrder")
                        .WithMany("PatientAilmentDetails")
                        .HasForeignKey("ConsultationJobOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("patientailment_ailment_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PatientAilment", "PatientAilment")
                        .WithMany("PatientAilmentDetails")
                        .HasForeignKey("PatientAilmentId")
                        .IsRequired()
                        .HasConstraintName("patientailmentdetail_patientailment_id_fk");

                    b.Navigation("ConsultationJobOrder");

                    b.Navigation("PatientAilment");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientConsultation", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrder", "ConsultationJobOrder")
                        .WithMany("PatientConsultations")
                        .HasForeignKey("ConsultationJobOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("patientconsultation_ailment_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Patient", "Patient")
                        .WithMany("PatientConsultations")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("patientconsultation_patient_id_fk");

                    b.Navigation("ConsultationJobOrder");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientLaboratory", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrder", "LaboratoryJobOrder")
                        .WithMany("PatientLaboratories")
                        .HasForeignKey("LaboratoryJobOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("laboratoryjoborder_ailment_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Patient", "Patient")
                        .WithMany("PatientLaboratories")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("patientconsultation_patient_id_fk");

                    b.Navigation("LaboratoryJobOrder");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientReminder", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrder", "ConsultationJobOrder")
                        .WithMany("PatientReminders")
                        .HasForeignKey("ConsultationJobOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("patientreminder_ailment_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Patient", "Patient")
                        .WithMany("PatientReminders")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("patientreminder_patient_id_fk");

                    b.Navigation("ConsultationJobOrder");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Patient", "Patient")
                        .WithMany("PatientTags")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("patienttag_patient_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("PatientTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("patient_tag_id_fk");

                    b.Navigation("Patient");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PatientTypeGroup", "Group")
                        .WithMany("PatientTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("patiententity_patiententitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Pharmacy", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PharmacyType", "Type")
                        .WithMany("Pharmacies")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("pharmacy_pharmacyentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyJobOrder", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Patient", "Patient")
                        .WithMany("PharmacyJobOrders")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pharmacyjoborder_patient_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PharmacyLocation", "PharmacyLocation")
                        .WithMany("PharmacyJobOrders")
                        .HasForeignKey("PharmacyLocationId")
                        .IsRequired()
                        .HasConstraintName("pharmacyjoborder_pharmacylocation_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Schedule", "Schedule")
                        .WithMany("PharmacyJobOrders")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("pharmacyjoborder_schedule_id_fk");

                    b.Navigation("Patient");

                    b.Navigation("PharmacyLocation");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyJobOrderConsultationJobOrder", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrder", "ConsultationJobOrder")
                        .WithMany("PharmacyJobOrderConsultationJobOrders")
                        .HasForeignKey("ConsultationJobOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pharmacyjoborder_consultationjoborder_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PharmacyJobOrder", "PharmacyJobOrder")
                        .WithMany("PharmacyJobOrderConsultationJobOrders")
                        .HasForeignKey("PharmacyJobOrderId")
                        .IsRequired()
                        .HasConstraintName("pharmacyjobordermedicine_pharmacyjoborder_id_fk");

                    b.Navigation("ConsultationJobOrder");

                    b.Navigation("PharmacyJobOrder");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyJobOrderMedicine", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "DosageUnit")
                        .WithMany("PharmacyJobOrderMedicineDosageUnits")
                        .HasForeignKey("DosageUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pharmacyjobordermedicine_unit_id_fk_3");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "DurationUnit")
                        .WithMany("PharmacyJobOrderMedicineDurationUnits")
                        .HasForeignKey("DurationUnitId")
                        .IsRequired()
                        .HasConstraintName("pharmacyjobordermedicine_unit_id_fk_2");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "IntakeUnit")
                        .WithMany("PharmacyJobOrderMedicineIntakeUnits")
                        .HasForeignKey("IntakeUnitId")
                        .IsRequired()
                        .HasConstraintName("pharmacyjobordermedicine_unit_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Medicine", "Medicine")
                        .WithMany("PharmacyJobOrderMedicines")
                        .HasForeignKey("MedicineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pharmacyjobordermedicine_medicine_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PharmacyJobOrder", "PharmacyJobOrder")
                        .WithMany("PharmacyJobOrderMedicines")
                        .HasForeignKey("PharmacyJobOrderId")
                        .IsRequired()
                        .HasConstraintName("pharmacyjobordermedicine_pharmacyjoborder_id_fk");

                    b.Navigation("DosageUnit");

                    b.Navigation("DurationUnit");

                    b.Navigation("IntakeUnit");

                    b.Navigation("Medicine");

                    b.Navigation("PharmacyJobOrder");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyLocation", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyLocations")
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("pharmacylocation_pharmacy_id_fk");

                    b.Navigation("Pharmacy");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyMember", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyMembers")
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("pharmacymember_pharmacy_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PharmacyLocation", "PharmacyLocation")
                        .WithMany("PharmacyMembers")
                        .HasForeignKey("PharmacyLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pharmacymember_pharmacylocation_id_fk");

                    b.Navigation("Pharmacy");

                    b.Navigation("PharmacyLocation");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyService", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyServices")
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("pharmacyservice_pharmacy_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PharmacyLocation", "PharmacyLocation")
                        .WithMany("PharmacyServices")
                        .HasForeignKey("PharmacyLocationId")
                        .IsRequired()
                        .HasConstraintName("pharmacyservice_pharmacylocation_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PharmacyServiceType", "Type")
                        .WithMany("PharmacyServices")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("pharmacyservice_pharmacyserviceentity_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "Unit")
                        .WithMany("PharmacyServices")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pharmacyservice_unit_id_fk");

                    b.Navigation("Pharmacy");

                    b.Navigation("PharmacyLocation");

                    b.Navigation("Type");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyServiceTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PharmacyService", "PharmacyService")
                        .WithMany("PharmacyServiceTags")
                        .HasForeignKey("PharmacyServiceId")
                        .IsRequired()
                        .HasConstraintName("pharmacyservicetag_pharmacy_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("PharmacyServiceTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pharmacytag_tag_id_fk");

                    b.Navigation("PharmacyService");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyServiceType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.PharmacyServiceTypeGroup", "Group")
                        .WithMany("PharmacyServiceTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("pharmacyserviceentity_pharmacyserviceentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyStock", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Medicine", "Medicine")
                        .WithMany("PharmacyStocks")
                        .HasForeignKey("MedicineId")
                        .IsRequired()
                        .HasConstraintName("pharmacystocks_medicine_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyStocks")
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("pharmacystocks_pharmacy_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Unit", "UnitNavigation")
                        .WithMany("PharmacyStocks")
                        .HasForeignKey("Unit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pharmacystocks_unit_id_fk");

                    b.Navigation("Medicine");

                    b.Navigation("Pharmacy");

                    b.Navigation("UnitNavigation");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Pharmacy", "Pharmacy")
                        .WithMany("PharmacyTags")
                        .HasForeignKey("PharmacyId")
                        .IsRequired()
                        .HasConstraintName("pharmacytag_pharmacy_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("PharmacyTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pharmacytag_tag_id_fk");

                    b.Navigation("Pharmacy");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Schedule", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.SchedulePriority", "Priority")
                        .WithMany("Schedules")
                        .HasForeignKey("PriorityId")
                        .IsRequired()
                        .HasConstraintName("schedule_schedulepriority_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ScheduleType", "Type")
                        .WithMany("Schedules")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("schedule_scheduleentity_id_fk");

                    b.Navigation("Priority");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.SchedulePriority", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.SchedulePriorityType", "Type")
                        .WithMany("SchedulePriorities")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("schedulepriority_schedulepriorityentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ScheduleTag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Schedule", "Schedule")
                        .WithMany("ScheduleTags")
                        .HasForeignKey("ScheduleId")
                        .IsRequired()
                        .HasConstraintName("scheduletag_schedule_id_fk");

                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.Tag", "Tag")
                        .WithMany("ScheduleTags")
                        .HasForeignKey("TagId")
                        .IsRequired()
                        .HasConstraintName("scheduletag_tag_id_fk");

                    b.Navigation("Schedule");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ScheduleType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.ScheduleTypeGroup", "Group")
                        .WithMany("ScheduleTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("scheduleentity_scheduleentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Tag", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.TagType", "Type")
                        .WithMany("Tags")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("tag_tagentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.TagType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.TagTypeGroup", "Group")
                        .WithMany("TagTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("tagentity_tagentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Unit", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.UnitType", "Type")
                        .WithMany("Units")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("unit_unitentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.UnitType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.UnitTypeGroup", "Group")
                        .WithMany("UnitTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("unitentity_unitentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Vendor", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.VendorType", "Type")
                        .WithMany("Vendors")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("vendor_vendorentity_id_fk");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.VendorType", b =>
                {
                    b.HasOne("HealthEssentials.Domain.Generics.Contracts.VendorTypeGroup", "Group")
                        .WithMany("VendorTypes")
                        .HasForeignKey("GroupId")
                        .IsRequired()
                        .HasConstraintName("vendorentity_vendorentitygroup_id_fk");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Ailment", b =>
                {
                    b.Navigation("AilmentTags");

                    b.Navigation("PatientAilments");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.AilmentType", b =>
                {
                    b.Navigation("Ailments");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.AilmentTypeGroup", b =>
                {
                    b.Navigation("AilmentTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Consultation", b =>
                {
                    b.Navigation("ConsultationJobOrders");

                    b.Navigation("ConsultationTags");

                    b.Navigation("DoctorConsultations");

                    b.Navigation("HospitalConsultations");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationJobOrder", b =>
                {
                    b.Navigation("ConsultationJobOrderLaboratories");

                    b.Navigation("ConsultationJobOrderMedicines");

                    b.Navigation("DoctorConsultationJobOrders");

                    b.Navigation("LaboratoryJobOrders");

                    b.Navigation("PatientAilmentDetails");

                    b.Navigation("PatientConsultations");

                    b.Navigation("PatientReminders");

                    b.Navigation("PharmacyJobOrderConsultationJobOrders");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationType", b =>
                {
                    b.Navigation("Consultations");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ConsultationTypeGroup", b =>
                {
                    b.Navigation("ConsultationTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Doctor", b =>
                {
                    b.Navigation("DoctorConsultationJobOrders");

                    b.Navigation("DoctorConsultations");

                    b.Navigation("DoctorTags");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.DoctorType", b =>
                {
                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.DoctorTypeGroup", b =>
                {
                    b.Navigation("DoctorTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Hospital", b =>
                {
                    b.Navigation("HospitalConsultations");

                    b.Navigation("HospitalLaboratories");

                    b.Navigation("HospitalLocations");

                    b.Navigation("HospitalServices");

                    b.Navigation("HospitalTags");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalLocation", b =>
                {
                    b.Navigation("HospitalServices");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalService", b =>
                {
                    b.Navigation("HospitalServiceTags");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalServiceType", b =>
                {
                    b.Navigation("HospitalServices");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalServiceTypeGroup", b =>
                {
                    b.Navigation("HospitalServiceTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalType", b =>
                {
                    b.Navigation("Hospitals");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.HospitalTypeGroup", b =>
                {
                    b.Navigation("HospitalTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Laboratory", b =>
                {
                    b.Navigation("HospitalLaboratories");

                    b.Navigation("LaboratoryJobOrders");

                    b.Navigation("LaboratoryLocations");

                    b.Navigation("LaboratoryMembers");

                    b.Navigation("LaboratoryServices");

                    b.Navigation("LaboratoryTags");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrder", b =>
                {
                    b.Navigation("LaboratoryJobOrderDetails");

                    b.Navigation("LaboratoryJobOrderResults");

                    b.Navigation("PatientLaboratories");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryJobOrderResult", b =>
                {
                    b.Navigation("LaboratoryJobOrderResultFiles");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryLocation", b =>
                {
                    b.Navigation("ConsultationJobOrderLaboratories");

                    b.Navigation("LaboratoryJobOrders");

                    b.Navigation("LaboratoryLocationTags");

                    b.Navigation("LaboratoryMembers");

                    b.Navigation("LaboratoryServices");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryService", b =>
                {
                    b.Navigation("LaboratoryJobOrderDetails");

                    b.Navigation("LaboratoryServiceTags");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryServiceType", b =>
                {
                    b.Navigation("ConsultationJobOrderLaboratories");

                    b.Navigation("LaboratoryServices");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryServiceTypeGroup", b =>
                {
                    b.Navigation("LaboratoryServiceTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryType", b =>
                {
                    b.Navigation("Laboratories");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LaboratoryTypeGroup", b =>
                {
                    b.Navigation("LaboratoryTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Logistic", b =>
                {
                    b.Navigation("LogisticRiderHandles");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticJobOrder", b =>
                {
                    b.Navigation("LogisticJobOrderDetails");

                    b.Navigation("LogisticJobOrderLocations");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticRider", b =>
                {
                    b.Navigation("LogisticJobOrders");

                    b.Navigation("LogisticRiderHandles");

                    b.Navigation("LogisticRiderTags");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.LogisticType", b =>
                {
                    b.Navigation("Logistics");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Medicine", b =>
                {
                    b.Navigation("ConsultationJobOrderMedicines");

                    b.Navigation("MedicineTags");

                    b.Navigation("MedicineVendors");

                    b.Navigation("PharmacyJobOrderMedicines");

                    b.Navigation("PharmacyStocks");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineIntakeType", b =>
                {
                    b.Navigation("MedicineIntakes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineType", b =>
                {
                    b.Navigation("Medicines");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MedicineTypeGroup", b =>
                {
                    b.Navigation("MedicineTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MetaDataType", b =>
                {
                    b.Navigation("MetaData");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.MetaDataTypeGroup", b =>
                {
                    b.Navigation("MetaDataTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Patient", b =>
                {
                    b.Navigation("LaboratoryJobOrders");

                    b.Navigation("PatientAilments");

                    b.Navigation("PatientConsultations");

                    b.Navigation("PatientLaboratories");

                    b.Navigation("PatientReminders");

                    b.Navigation("PatientTags");

                    b.Navigation("PharmacyJobOrders");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientAilment", b =>
                {
                    b.Navigation("PatientAilmentDetails");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientType", b =>
                {
                    b.Navigation("Patients");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PatientTypeGroup", b =>
                {
                    b.Navigation("PatientTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Pharmacy", b =>
                {
                    b.Navigation("PharmacyLocations");

                    b.Navigation("PharmacyMembers");

                    b.Navigation("PharmacyServices");

                    b.Navigation("PharmacyStocks");

                    b.Navigation("PharmacyTags");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyJobOrder", b =>
                {
                    b.Navigation("PharmacyJobOrderConsultationJobOrders");

                    b.Navigation("PharmacyJobOrderMedicines");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyLocation", b =>
                {
                    b.Navigation("PharmacyJobOrders");

                    b.Navigation("PharmacyMembers");

                    b.Navigation("PharmacyServices");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyService", b =>
                {
                    b.Navigation("PharmacyServiceTags");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyServiceType", b =>
                {
                    b.Navigation("PharmacyServices");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyServiceTypeGroup", b =>
                {
                    b.Navigation("PharmacyServiceTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.PharmacyType", b =>
                {
                    b.Navigation("Pharmacies");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Schedule", b =>
                {
                    b.Navigation("ConsultationJobOrders");

                    b.Navigation("LaboratoryJobOrders");

                    b.Navigation("LogisticJobOrders");

                    b.Navigation("PharmacyJobOrders");

                    b.Navigation("ScheduleTags");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.SchedulePriority", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.SchedulePriorityType", b =>
                {
                    b.Navigation("SchedulePriorities");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ScheduleType", b =>
                {
                    b.Navigation("Availabilities");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.ScheduleTypeGroup", b =>
                {
                    b.Navigation("ScheduleTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Tag", b =>
                {
                    b.Navigation("AilmentTags");

                    b.Navigation("ConsultationTags");

                    b.Navigation("DoctorTags");

                    b.Navigation("HospitalServiceTags");

                    b.Navigation("HospitalTags");

                    b.Navigation("LaboratoryLocationTags");

                    b.Navigation("LaboratoryServiceTags");

                    b.Navigation("LaboratoryTags");

                    b.Navigation("LogisticRiderTags");

                    b.Navigation("MedicineTags");

                    b.Navigation("PatientTags");

                    b.Navigation("PharmacyServiceTags");

                    b.Navigation("PharmacyTags");

                    b.Navigation("ScheduleTags");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.TagType", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.TagTypeGroup", b =>
                {
                    b.Navigation("TagTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Unit", b =>
                {
                    b.Navigation("ConsultationJobOrderMedicineDosageUnits");

                    b.Navigation("ConsultationJobOrderMedicineDurationUnits");

                    b.Navigation("ConsultationJobOrderMedicineIntakeUnits");

                    b.Navigation("HospitalServices");

                    b.Navigation("LaboratoryServices");

                    b.Navigation("LogisticJobOrderDetails");

                    b.Navigation("MedicineIntakes");

                    b.Navigation("PharmacyJobOrderMedicineDosageUnits");

                    b.Navigation("PharmacyJobOrderMedicineDurationUnits");

                    b.Navigation("PharmacyJobOrderMedicineIntakeUnits");

                    b.Navigation("PharmacyServices");

                    b.Navigation("PharmacyStocks");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.UnitType", b =>
                {
                    b.Navigation("Units");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.UnitTypeGroup", b =>
                {
                    b.Navigation("UnitTypes");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.Vendor", b =>
                {
                    b.Navigation("MedicineVendors");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.VendorType", b =>
                {
                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("HealthEssentials.Domain.Generics.Contracts.VendorTypeGroup", b =>
                {
                    b.Navigation("VendorTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
